--[[██╗░░░░░██╗███╗░░██╗██╗░░░██╗██╗░░██╗██║░░░░░██║████╗░██║██║░░░██║╚██╗██╔╝██║░░░░░██║██╔██╗██║██║░░░██║░╚███╔╝░██║░░░░░██║██║╚████║██║░░░██║░██╔██╗░███████╗██║██║░╚███║╚██████╔╝██╔╝╚██╗╚══════╝╚═╝╚═╝░░╚══╝░╚═════╝░╚═╝░░╚═╝Autor: LinuxDevBrv1.5.9]]
local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local MarketplaceService = game:GetService("MarketplaceService")

local ConnectionManager = {}
ConnectionManager.__index = ConnectionManager

function ConnectionManager.new()
local self = setmetatable({}, ConnectionManager)
self.connections = {}
self.callbacks = {}
self.updateLoops = {}
self.tweens = {}
self.isDestroyed = false
self.elementsLoaded = 0
self.totalElements = 0
return self
end

function ConnectionManager:addConnection(connection)
if not self.isDestroyed and connection then
table.insert(self.connections, connection)
end
return connection
end

function ConnectionManager:addCallback(callback)
if not self.isDestroyed and callback then
table.insert(self.callbacks, callback)
end
return callback
end

function ConnectionManager:addUpdateLoop(connection)
if not self.isDestroyed and connection then
table.insert(self.updateLoops, connection)
end
return connection
end

function ConnectionManager:addTween(tween)
if not self.isDestroyed and tween then
table.insert(self.tweens, tween)
end
return tween
end

function ConnectionManager:incrementElementCount()
self.totalElements = self.totalElements + 1
end

function ConnectionManager:elementLoaded()
self.elementsLoaded = self.elementsLoaded + 1
end

function ConnectionManager:allElementsLoaded()
return self.elementsLoaded >= self.totalElements
end

function ConnectionManager:cleanup()
self.isDestroyed = true
for _, connection in ipairs(self.connections) do
if connection and connection.Connected then
connection:Disconnect()
end
end
for _, connection in ipairs(self.updateLoops) do
if connection and connection.Connected then
connection:Disconnect()
end
end
for _, tween in ipairs(self.tweens) do
if tween then
tween:Cancel()
end
end
self.connections = {}
self.callbacks = {}
self.updateLoops = {}
self.tweens = {}
end

function ConnectionManager:isActive()
return not self.isDestroyed
end

local LucideIcons = {
["accessibility"] = "rbxassetid://10709751939",
["activity"] = "rbxassetid://10709752035",
["air-vent"] = "rbxassetid://10709752131",
["airplay"] = "rbxassetid://10709752254",
["alarm-check"] = "rbxassetid://10709752405",
["alarm-clock"] = "rbxassetid://10709752630",
["alarm-clock-off"] = "rbxassetid://10709752508",
["alarm-minus"] = "rbxassetid://10709752732",
["alarm-plus"] = "rbxassetid://10709752825",
["album"] = "rbxassetid://10709752906",
["alert-circle"] = "rbxassetid://10709752996",
["alert-octagon"] = "rbxassetid://10709753064",
["alert-triangle"] = "rbxassetid://10709753149",
["align-center"] = "rbxassetid://10709753570",
["align-center-horizontal"] = "rbxassetid://10709753272",
["align-center-vertical"] = "rbxassetid://10709753421",
["align-end-horizontal"] = "rbxassetid://10709753692",
["align-end-vertical"] = "rbxassetid://10709753808",
["align-horizontal-distribute-center"] = "rbxassetid://10747779791",
["align-horizontal-distribute-end"] = "rbxassetid://10747784534",
["align-horizontal-distribute-start"] = "rbxassetid://10709754118",
["align-horizontal-justify-center"] = "rbxassetid://10709754204",
["align-horizontal-justify-end"] = "rbxassetid://10709754317",
["align-horizontal-justify-start"] = "rbxassetid://10709754436",
["align-horizontal-space-around"] = "rbxassetid://10709754590",
["align-horizontal-space-between"] = "rbxassetid://10709754749",
["align-justify"] = "rbxassetid://10709759610",
["align-left"] = "rbxassetid://10709759764",
["align-right"] = "rbxassetid://10709759895",
["align-start-horizontal"] = "rbxassetid://10709760051",
["align-start-vertical"] = "rbxassetid://10709760244",
["align-vertical-distribute-center"] = "rbxassetid://10709760351",
["align-vertical-distribute-end"] = "rbxassetid://10709760434",
["align-vertical-distribute-start"] = "rbxassetid://10709760612",
["align-vertical-justify-center"] = "rbxassetid://10709760814",
["align-vertical-justify-end"] = "rbxassetid://10709761003",
["align-vertical-justify-start"] = "rbxassetid://10709761176",
["align-vertical-space-around"] = "rbxassetid://10709761324",
["align-vertical-space-between"] = "rbxassetid://10709761434",
["anchor"] = "rbxassetid://10709761530",
["angry"] = "rbxassetid://10709761629",
["annoyed"] = "rbxassetid://10709761722",
["aperture"] = "rbxassetid://10709761813",
["apple"] = "rbxassetid://10709761889",
["archive"] = "rbxassetid://10709762233",
["archive-restore"] = "rbxassetid://10709762058",
["armchair"] = "rbxassetid://10709762327",
["arrow-big-down"] = "rbxassetid://10747796644",
["arrow-big-left"] = "rbxassetid://10709762574",
["arrow-big-right"] = "rbxassetid://10709762727",
["arrow-big-up"] = "rbxassetid://10709762879",
["arrow-down"] = "rbxassetid://10709767827",
["arrow-down-circle"] = "rbxassetid://10709763034",
["arrow-down-left"] = "rbxassetid://10709767656",
["arrow-down-right"] = "rbxassetid://10709767750",
["arrow-left"] = "rbxassetid://10709768114",
["arrow-left-circle"] = "rbxassetid://10709767936",
["arrow-left-right"] = "rbxassetid://10709768019",
["arrow-right"] = "rbxassetid://10709768347",
["arrow-right-circle"] = "rbxassetid://10709768226",
["arrow-up"] = "rbxassetid://10709768939",
["arrow-up-circle"] = "rbxassetid://10709768432",
["arrow-up-down"] = "rbxassetid://10709768538",
["arrow-up-left"] = "rbxassetid://10709768661",
["arrow-up-right"] = "rbxassetid://10709768787",
["asterisk"] = "rbxassetid://10709769095",
["at-sign"] = "rbxassetid://10709769286",
["award"] = "rbxassetid://10709769406",
["axe"] = "rbxassetid://10709769508",
["axis-3d"] = "rbxassetid://10709769598",
["baby"] = "rbxassetid://10709769732",
["backpack"] = "rbxassetid://10709769841",
["baggage-claim"] = "rbxassetid://10709769935",
["banana"] = "rbxassetid://10709770005",
["banknote"] = "rbxassetid://10709770178",
["bar-chart"] = "rbxassetid://10709773755",
["bar-chart-2"] = "rbxassetid://10709770317",
["bar-chart-3"] = "rbxassetid://10709770431",
["bar-chart-4"] = "rbxassetid://10709770560",
["bar-chart-horizontal"] = "rbxassetid://10709773669",
["barcode"] = "rbxassetid://10747360675",
["baseline"] = "rbxassetid://10709773863",
["bath"] = "rbxassetid://10709773963",
["battery"] = "rbxassetid://10709774640",
["battery-charging"] = "rbxassetid://10709774068",
["battery-full"] = "rbxassetid://10709774206",
["battery-low"] = "rbxassetid://10709774370",
["battery-medium"] = "rbxassetid://10709774513",
["beaker"] = "rbxassetid://10709774756",
["bed"] = "rbxassetid://10709775036",
["bed-double"] = "rbxassetid://10709774864",
["bed-single"] = "rbxassetid://10709774968",
["beer"] = "rbxassetid://10709775167",
["bell"] = "rbxassetid://10709775704",
["bell-minus"] = "rbxassetid://10709775241",
["bell-off"] = "rbxassetid://10709775320",
["bell-plus"] = "rbxassetid://10709775448",
["bell-ring"] = "rbxassetid://10709775560",
["bike"] = "rbxassetid://10709775894",
["binary"] = "rbxassetid://10709776050",
["bitcoin"] = "rbxassetid://10709776126",
["bluetooth"] = "rbxassetid://10709776655",
["bluetooth-connected"] = "rbxassetid://10709776240",
["bluetooth-off"] = "rbxassetid://10709776344",
["bluetooth-searching"] = "rbxassetid://10709776501",
["bold"] = "rbxassetid://10747813908",
["bomb"] = "rbxassetid://10709781460",
["bone"] = "rbxassetid://10709781605",
["book"] = "rbxassetid://10709781824",
["book-open"] = "rbxassetid://10709781717",
["bookmark"] = "rbxassetid://10709782154",
["bookmark-minus"] = "rbxassetid://10709781919",
["bookmark-plus"] = "rbxassetid://10709782044",
["bot"] = "rbxassetid://10709782230",
["box"] = "rbxassetid://10709782497",
["box-select"] = "rbxassetid://10709782342",
["boxes"] = "rbxassetid://10709782582",
["briefcase"] = "rbxassetid://10709782662",
["brush"] = "rbxassetid://10709782758",
["bug"] = "rbxassetid://10709782845",
["building"] = "rbxassetid://10709783051",
["building-2"] = "rbxassetid://10709782939",
["bus"] = "rbxassetid://10709783137",
["cake"] = "rbxassetid://10709783217",
["calculator"] = "rbxassetid://10709783311",
["calendar"] = "rbxassetid://10709789505",
["calendar-check"] = "rbxassetid://10709783474",
["calendar-check-2"] = "rbxassetid://10709783392",
["calendar-clock"] = "rbxassetid://10709783577",
["calendar-days"] = "rbxassetid://10709783673",
["calendar-heart"] = "rbxassetid://10709783835",
["calendar-minus"] = "rbxassetid://10709783959",
["calendar-off"] = "rbxassetid://10709788784",
["calendar-plus"] = "rbxassetid://10709788937",
["calendar-range"] = "rbxassetid://10709789053",
["calendar-search"] = "rbxassetid://10709789200",
["calendar-x"] = "rbxassetid://10709789407",
["calendar-x-2"] = "rbxassetid://10709789329",
["camera"] = "rbxassetid://10709789686",
["camera-off"] = "rbxassetid://10747822677",
["car"] = "rbxassetid://10709789810",
["carrot"] = "rbxassetid://10709789960",
["cast"] = "rbxassetid://10709790097",
["charge"] = "rbxassetid://10709790202",
["check"] = "rbxassetid://10709790644",
["check-circle"] = "rbxassetid://10709790387",
["check-circle-2"] = "rbxassetid://10709790298",
["check-square"] = "rbxassetid://10709790537",
["chef-hat"] = "rbxassetid://10709790757",
["cherry"] = "rbxassetid://10709790875",
["chevron-down"] = "rbxassetid://10709790948",
["chevron-first"] = "rbxassetid://10709791015",
["chevron-last"] = "rbxassetid://10709791130",
["chevron-left"] = "rbxassetid://10709791281",
["chevron-right"] = "rbxassetid://10709791437",
["chevron-up"] = "rbxassetid://10709791523",
["chevrons-down"] = "rbxassetid://10709796864",
["chevrons-down-up"] = "rbxassetid://10709791632",
["chevrons-left"] = "rbxassetid://10709797151",
["chevrons-left-right"] = "rbxassetid://10709797006",
["chevrons-right"] = "rbxassetid://10709797382",
["chevrons-right-left"] = "rbxassetid://10709797274",
["chevrons-up"] = "rbxassetid://10709797622",
["chevrons-up-down"] = "rbxassetid://10709797508",
["chrome"] = "rbxassetid://10709797725",
["circle"] = "rbxassetid://10709798174",
["circle-dot"] = "rbxassetid://10709797837",
["circle-ellipsis"] = "rbxassetid://10709797985",
["circle-slashed"] = "rbxassetid://10709798100",
["citrus"] = "rbxassetid://10709798276",
["clapperboard"] = "rbxassetid://10709798350",
["clipboard"] = "rbxassetid://10709799288",
["clipboard-check"] = "rbxassetid://10709798443",
["clipboard-copy"] = "rbxassetid://10709798574",
["clipboard-edit"] = "rbxassetid://10709798682",
["clipboard-list"] = "rbxassetid://10709798792",
["clipboard-signature"] = "rbxassetid://10709798890",
["clipboard-type"] = "rbxassetid://10709798999",
["clipboard-x"] = "rbxassetid://10709799124",
["clock"] = "rbxassetid://10709805144",
["clock-1"] = "rbxassetid://10709799535",
["clock-10"] = "rbxassetid://10709799718",
["clock-11"] = "rbxassetid://10709799818",
["clock-12"] = "rbxassetid://10709799962",
["clock-2"] = "rbxassetid://10709803876",
["clock-3"] = "rbxassetid://10709803989",
["clock-4"] = "rbxassetid://10709804164",
["clock-5"] = "rbxassetid://10709804291",
["clock-6"] = "rbxassetid://10709804435",
["clock-7"] = "rbxassetid://10709804599",
["clock-8"] = "rbxassetid://10709804784",
["clock-9"] = "rbxassetid://10709804996",
["cloud"] = "rbxassetid://10709806740",
["cloud-cog"] = "rbxassetid://10709805262",
["cloud-drizzle"] = "rbxassetid://10709805371",
["cloud-fog"] = "rbxassetid://10709805477",
["cloud-hail"] = "rbxassetid://10709805596",
["cloud-lightning"] = "rbxassetid://10709805727",
["cloud-moon"] = "rbxassetid://10709805942",
["cloud-moon-rain"] = "rbxassetid://10709805838",
["cloud-off"] = "rbxassetid://10709806060",
["cloud-rain"] = "rbxassetid://10709806277",
["cloud-rain-wind"] = "rbxassetid://10709806166",
["cloud-snow"] = "rbxassetid://10709806374",
["cloud-sun"] = "rbxassetid://10709806631",
["cloud-sun-rain"] = "rbxassetid://10709806475",
["cloudy"] = "rbxassetid://10709806859",
["clover"] = "rbxassetid://10709806995",
["code"] = "rbxassetid://10709810463",
["code-2"] = "rbxassetid://10709807111",
["codepen"] = "rbxassetid://10709810534",
["codesandbox"] = "rbxassetid://10709810676",
["coffee"] = "rbxassetid://10709810814",
["cog"] = "rbxassetid://10709810948",
["coins"] = "rbxassetid://10709811110",
["columns"] = "rbxassetid://10709811261",
["command"] = "rbxassetid://10709811365",
["compass"] = "rbxassetid://10709811445",
["component"] = "rbxassetid://10709811595",
["concierge-bell"] = "rbxassetid://10709811706",
["connection"] = "rbxassetid://10747361219",
["contact"] = "rbxassetid://10709811834",
["contrast"] = "rbxassetid://10709811939",
["cookie"] = "rbxassetid://10709812067",
["copy"] = "rbxassetid://10709812159",
["copyleft"] = "rbxassetid://10709812251",
["copyright"] = "rbxassetid://10709812311",
["corner-down-left"] = "rbxassetid://10709812396",
["corner-down-right"] = "rbxassetid://10709812485",
["corner-left-down"] = "rbxassetid://10709812632",
["corner-left-up"] = "rbxassetid://10709812784",
["corner-right-down"] = "rbxassetid://10709812939",
["corner-right-up"] = "rbxassetid://10709813094",
["corner-up-left"] = "rbxassetid://10709813185",
["corner-up-right"] = "rbxassetid://10709813281",
["cpu"] = "rbxassetid://10709813383",
["croissant"] = "rbxassetid://10709818125",
["crop"] = "rbxassetid://10709818245",
["cross"] = "rbxassetid://10709818399",
["crosshair"] = "rbxassetid://10709818534",
["crown"] = "rbxassetid://10709818626",
["cup-soda"] = "rbxassetid://10709818763",
["curly-braces"] = "rbxassetid://10709818847",
["currency"] = "rbxassetid://10709818931",
["database"] = "rbxassetid://10709818996",
["delete"] = "rbxassetid://10709819059",
["diamond"] = "rbxassetid://10709819149",
["dice-1"] = "rbxassetid://10709819266",
["dice-2"] = "rbxassetid://10709819361",
["dice-3"] = "rbxassetid://10709819508",
["dice-4"] = "rbxassetid://10709819670",
["dice-5"] = "rbxassetid://10709819801",
["dice-6"] = "rbxassetid://10709819896",
["dices"] = "rbxassetid://10723343321",
["diff"] = "rbxassetid://10723343416",
["disc"] = "rbxassetid://10723343537",
["divide"] = "rbxassetid://10723343805",
["divide-circle"] = "rbxassetid://10723343636",
["divide-square"] = "rbxassetid://10723343737",
["dollar-sign"] = "rbxassetid://10723343958",
["download"] = "rbxassetid://10723344270",
["download-cloud"] = "rbxassetid://10723344088",
["droplet"] = "rbxassetid://10723344432",
["droplets"] = "rbxassetid://10734883356",
["drumstick"] = "rbxassetid://10723344737",
["edit"] = "rbxassetid://10734883598",
["edit-2"] = "rbxassetid://10723344885",
["edit-3"] = "rbxassetid://10723345088",
["egg"] = "rbxassetid://10723345518",
["egg-fried"] = "rbxassetid://10723345347",
["electricity"] = "rbxassetid://10723345749",
["electricity-off"] = "rbxassetid://10723345643",
["equal"] = "rbxassetid://10723345990",
["equal-not"] = "rbxassetid://10723345866",
["eraser"] = "rbxassetid://10723346158",
["euro"] = "rbxassetid://10723346372",
["expand"] = "rbxassetid://10723346553",
["external-link"] = "rbxassetid://10723346684",
["eye"] = "rbxassetid://10723346959",
["eye-off"] = "rbxassetid://10723346871",
["factory"] = "rbxassetid://10723347051",
["fan"] = "rbxassetid://10723354359",
["fast-forward"] = "rbxassetid://10723354521",
["feather"] = "rbxassetid://10723354671",
["figma"] = "rbxassetid://10723354801",
["file"] = "rbxassetid://10723374641",
["file-archive"] = "rbxassetid://10723354921",
["file-audio"] = "rbxassetid://10723355148",
["file-audio-2"] = "rbxassetid://10723355026",
["file-axis-3d"] = "rbxassetid://10723355272",
["file-badge"] = "rbxassetid://10723355622",
["file-badge-2"] = "rbxassetid://10723355451",
["file-bar-chart"] = "rbxassetid://10723355887",
["file-bar-chart-2"] = "rbxassetid://10723355746",
["file-box"] = "rbxassetid://10723355989",
["file-check"] = "rbxassetid://10723356210",
["file-check-2"] = "rbxassetid://10723356100",
["file-clock"] = "rbxassetid://10723356329",
["file-code"] = "rbxassetid://10723356507",
["file-cog"] = "rbxassetid://10723356830",
["file-cog-2"] = "rbxassetid://10723356676",
["file-diff"] = "rbxassetid://10723357039",
["file-digit"] = "rbxassetid://10723357151",
["file-down"] = "rbxassetid://10723357322",
["file-edit"] = "rbxassetid://10723357495",
["file-heart"] = "rbxassetid://10723357637",
["file-image"] = "rbxassetid://10723357790",
["file-input"] = "rbxassetid://10723357933",
["file-json"] = "rbxassetid://10723364435",
["file-json-2"] = "rbxassetid://10723364361",
["file-key"] = "rbxassetid://10723364605",
["file-key-2"] = "rbxassetid://10723364515",
["file-line-chart"] = "rbxassetid://10723364725",
["file-lock"] = "rbxassetid://10723364957",
["file-lock-2"] = "rbxassetid://10723364861",
["file-minus"] = "rbxassetid://10723365254",
["file-minus-2"] = "rbxassetid://10723365086",
["file-output"] = "rbxassetid://10723365457",
["file-pie-chart"] = "rbxassetid://10723365598",
["file-plus"] = "rbxassetid://10723365877",
["file-plus-2"] = "rbxassetid://10723365766",
["file-question"] = "rbxassetid://10723365987",
["file-scan"] = "rbxassetid://10723366167",
["file-search"] = "rbxassetid://10723366550",
["file-search-2"] = "rbxassetid://10723366340",
["file-signature"] = "rbxassetid://10723366741",
["file-spreadsheet"] = "rbxassetid://10723366962",
["file-symlink"] = "rbxassetid://10723367098",
["file-terminal"] = "rbxassetid://10723367244",
["file-text"] = "rbxassetid://10723367380",
["file-type"] = "rbxassetid://10723367606",
["file-type-2"] = "rbxassetid://10723367509",
["file-up"] = "rbxassetid://10723367734",
["file-video"] = "rbxassetid://10723373884",
["file-video-2"] = "rbxassetid://10723367834",
["file-volume"] = "rbxassetid://10723374172",
["file-volume-2"] = "rbxassetid://10723374030",
["file-warning"] = "rbxassetid://10723374276",
["file-x"] = "rbxassetid://10723374544",
["file-x-2"] = "rbxassetid://10723374378",
["files"] = "rbxassetid://10723374759",
["film"] = "rbxassetid://10723374981",
["filter"] = "rbxassetid://10723375128",
["fingerprint"] = "rbxassetid://10723375250",
["flag"] = "rbxassetid://10723375890",
["flag-off"] = "rbxassetid://10723375443",
["flag-triangle-left"] = "rbxassetid://10723375608",
["flag-triangle-right"] = "rbxassetid://10723375727",
["flame"] = "rbxassetid://10723376114",
["flashlight"] = "rbxassetid://10723376471",
["flashlight-off"] = "rbxassetid://10723376365",
["flask-conical"] = "rbxassetid://10734883986",
["flask-round"] = "rbxassetid://10723376614",
["flip-horizontal"] = "rbxassetid://10723376884",
["flip-horizontal-2"] = "rbxassetid://10723376745",
["flip-vertical"] = "rbxassetid://10723377138",
["flip-vertical-2"] = "rbxassetid://10723377026",
["flower"] = "rbxassetid://10747830374",
["flower-2"] = "rbxassetid://10723377305",
["focus"] = "rbxassetid://10723377537",
["folder"] = "rbxassetid://10723387563",
["folder-archive"] = "rbxassetid://10723384478",
["folder-check"] = "rbxassetid://10723384605",
["folder-clock"] = "rbxassetid://10723384731",
["folder-closed"] = "rbxassetid://10723384893",
["folder-cog"] = "rbxassetid://10723385213",
["folder-cog-2"] = "rbxassetid://10723385036",
["folder-down"] = "rbxassetid://10723385338",
["folder-edit"] = "rbxassetid://10723385445",
["folder-heart"] = "rbxassetid://10723385545",
["folder-input"] = "rbxassetid://10723385721",
["folder-key"] = "rbxassetid://10723385848",
["folder-lock"] = "rbxassetid://10723386005",
["folder-minus"] = "rbxassetid://10723386127",
["folder-open"] = "rbxassetid://10723386277",
["folder-output"] = "rbxassetid://10723386386",
["folder-plus"] = "rbxassetid://10723386531",
["folder-search"] = "rbxassetid://10723386787",
["folder-search-2"] = "rbxassetid://10723386674",
["folder-symlink"] = "rbxassetid://10723386930",
["folder-tree"] = "rbxassetid://10723387085",
["folder-up"] = "rbxassetid://10723387265",
["folder-x"] = "rbxassetid://10723387448",
["folders"] = "rbxassetid://10723387721",
["form-input"] = "rbxassetid://10723387841",
["forward"] = "rbxassetid://10723388016",
["frame"] = "rbxassetid://10723394389",
["framer"] = "rbxassetid://10723394565",
["frown"] = "rbxassetid://10723394681",
["fuel"] = "rbxassetid://10723394846",
["function-square"] = "rbxassetid://10723395041",
["gamepad"] = "rbxassetid://10723395457",
["gamepad-2"] = "rbxassetid://10723395215",
["gauge"] = "rbxassetid://10723395708",
["gavel"] = "rbxassetid://10723395896",
["gem"] = "rbxassetid://10723396000",
["ghost"] = "rbxassetid://10723396107",
["gift"] = "rbxassetid://10723396402",
["gift-card"] = "rbxassetid://10723396225",
["git-branch"] = "rbxassetid://10723396676",
["git-branch-plus"] = "rbxassetid://10723396542",
["git-commit"] = "rbxassetid://10723396812",
["git-compare"] = "rbxassetid://10723396954",
["git-fork"] = "rbxassetid://10723397049",
["git-merge"] = "rbxassetid://10723397165",
["git-pull-request"] = "rbxassetid://10723397431",
["git-pull-request-closed"] = "rbxassetid://10723397268",
["git-pull-request-draft"] = "rbxassetid://10734884302",
["glass"] = "rbxassetid://10723397788",
["glass-2"] = "rbxassetid://10723397529",
["glass-water"] = "rbxassetid://10723397678",
["glasses"] = "rbxassetid://10723397895",
["globe"] = "rbxassetid://10723404337",
["globe-2"] = "rbxassetid://10723398002",
["grab"] = "rbxassetid://10723404472",
["graduation-cap"] = "rbxassetid://10723404691",
["grape"] = "rbxassetid://10723404822",
["grid"] = "rbxassetid://10723404936",
["grip-horizontal"] = "rbxassetid://10723405089",
["grip-vertical"] = "rbxassetid://10723405236",
["hammer"] = "rbxassetid://10723405360",
["hand"] = "rbxassetid://10723405649",
["hand-metal"] = "rbxassetid://10723405508",
["hard-drive"] = "rbxassetid://10723405749",
["hard-hat"] = "rbxassetid://10723405859",
["hash"] = "rbxassetid://10723405975",
["haze"] = "rbxassetid://10723406078",
["headphones"] = "rbxassetid://10723406165",
["heart"] = "rbxassetid://10723406885",
["heart-crack"] = "rbxassetid://10723406299",
["heart-handshake"] = "rbxassetid://10723406480",
["heart-off"] = "rbxassetid://10723406662",
["heart-pulse"] = "rbxassetid://10723406795",
["help-circle"] = "rbxassetid://10723406988",
["hexagon"] = "rbxassetid://10723407092",
["highlighter"] = "rbxassetid://10723407192",
["history"] = "rbxassetid://10723407335",
["home"] = "rbxassetid://10723407389",
["hourglass"] = "rbxassetid://10723407498",
["ice-cream"] = "rbxassetid://10723414308",
["image"] = "rbxassetid://10723415040",
["image-minus"] = "rbxassetid://10723414487",
["image-off"] = "rbxassetid://10723414677",
["image-plus"] = "rbxassetid://10723414827",
["import"] = "rbxassetid://10723415205",
["inbox"] = "rbxassetid://10723415335",
["indent"] = "rbxassetid://10723415494",
["indian-rupee"] = "rbxassetid://10723415642",
["infinity"] = "rbxassetid://10723415766",
["info"] = "rbxassetid://10723415903",
["inspect"] = "rbxassetid://10723416057",
["italic"] = "rbxassetid://10723416195",
["japanese-yen"] = "rbxassetid://10723416363",
["joystick"] = "rbxassetid://10723416527",
["key"] = "rbxassetid://10723416652",
["keyboard"] = "rbxassetid://10723416765",
["lamp"] = "rbxassetid://10723417513",
["lamp-ceiling"] = "rbxassetid://10723416922",
["lamp-desk"] = "rbxassetid://10723417016",
["lamp-floor"] = "rbxassetid://10723417131",
["lamp-wall-down"] = "rbxassetid://10723417240",
["lamp-wall-up"] = "rbxassetid://10723417356",
["landmark"] = "rbxassetid://10723417608",
["languages"] = "rbxassetid://10723417703",
["laptop"] = "rbxassetid://10723423881",
["laptop-2"] = "rbxassetid://10723417797",
["lasso"] = "rbxassetid://10723424235",
["lasso-select"] = "rbxassetid://10723424058",
["laugh"] = "rbxassetid://10723424372",
["layers"] = "rbxassetid://10723424505",
["layout"] = "rbxassetid://10723425376",
["layout-dashboard"] = "rbxassetid://10723424646",
["layout-grid"] = "rbxassetid://10723424838",
["layout-list"] = "rbxassetid://10723424963",
["layout-template"] = "rbxassetid://10723425187",
["leaf"] = "rbxassetid://10723425539",
["library"] = "rbxassetid://10723425615",
["life-buoy"] = "rbxassetid://10723425685",
["lightbulb"] = "rbxassetid://10723425852",
["lightbulb-off"] = "rbxassetid://10723425762",
["line-chart"] = "rbxassetid://10723426393",
["link"] = "rbxassetid://10723426722",
["link-2"] = "rbxassetid://10723426595",
["link-2-off"] = "rbxassetid://10723426513",
["list"] = "rbxassetid://10723433811",
["list-checks"] = "rbxassetid://10734884548",
["list-end"] = "rbxassetid://10723426886",
["list-minus"] = "rbxassetid://10723426986",
["list-music"] = "rbxassetid://10723427081",
["list-ordered"] = "rbxassetid://10723427199",
["list-plus"] = "rbxassetid://10723427334",
["list-start"] = "rbxassetid://10723427494",
["list-video"] = "rbxassetid://10723427619",
["list-x"] = "rbxassetid://10723433655",
["loader"] = "rbxassetid://10723434070",
["loader-2"] = "rbxassetid://10723433935",
["locate"] = "rbxassetid://10723434557",
["locate-fixed"] = "rbxassetid://10723434236",
["locate-off"] = "rbxassetid://1072334379",
["lock"] = "rbxassetid://10723434711",
["log-in"] = "rbxassetid://10723434830",
["log-out"] = "rbxassetid://10723434906",
["luggage"] = "rbxassetid://10723434993",
["magnet"] = "rbxassetid://10723435069",
["mail"] = "rbxassetid://10734885430",
["mail-check"] = "rbxassetid://10723435182",
["mail-minus"] = "rbxassetid://10723435261",
["mail-open"] = "rbxassetid://10723435342",
["mail-plus"] = "rbxassetid://10723435443",
["mail-question"] = "rbxassetid://10723435515",
["mail-search"] = "rbxassetid://10734884739",
["mail-warning"] = "rbxassetid://10734885015",
["mail-x"] = "rbxassetid://10734885247",
["mails"] = "rbxassetid://10734885614",
["map"] = "rbxassetid://10734886202",
["map-pin"] = "rbxassetid://10734886004",
["map-pin-off"] = "rbxassetid://10734885803",
["maximize"] = "rbxassetid://10734886735",
["maximize-2"] = "rbxassetid://10734886496",
["medal"] = "rbxassetid://10734887072",
["megaphone"] = "rbxassetid://10734887454",
["megaphone-off"] = "rbxassetid://10734887311",
["meh"] = "rbxassetid://10734887603",
["menu"] = "rbxassetid://10734887784",
["message-circle"] = "rbxassetid://10734888000",
["message-square"] = "rbxassetid://10734888228",
["mic"] = "rbxassetid://10734888864",
["mic-2"] = "rbxassetid://10734888430",
["mic-off"] = "rbxassetid://10734888646",
["microscope"] = "rbxassetid://10734889106",
["microwave"] = "rbxassetid://10734895076",
["milestone"] = "rbxassetid://10734895310",
["minimize"] = "rbxassetid://10734895698",
["minimize-2"] = "rbxassetid://10734895530",
["minus"] = "rbxassetid://10734896206",
["minus-circle"] = "rbxassetid://10734895856",
["minus-square"] = "rbxassetid://10734896029",
["monitor"] = "rbxassetid://10734896881",
["monitor-off"] = "rbxassetid://10734896360",
["monitor-speaker"] = "rbxassetid://10734896512",
["moon"] = "rbxassetid://10734897102",
["more-horizontal"] = "rbxassetid://10734897250",
["more-vertical"] = "rbxassetid://10734897387",
["mountain"] = "rbxassetid://10734897956",
["mountain-snow"] = "rbxassetid://10734897665",
["mouse"] = "rbxassetid://10734898592",
["mouse-pointer"] = "rbxassetid://10734898476",
["mouse-pointer-2"] = "rbxassetid://10734898194",
["mouse-pointer-click"] = "rbxassetid://10734898355",
["move"] = "rbxassetid://10734900011",
["move-3d"] = "rbxassetid://10734898756",
["move-diagonal"] = "rbxassetid://10734899164",
["move-diagonal-2"] = "rbxassetid://10734898934",
["move-horizontal"] = "rbxassetid://10734899414",
["move-vertical"] = "rbxassetid://10734899821",
["music"] = "rbxassetid://10734905958",
["music-2"] = "rbxassetid://10734900215",
["music-3"] = "rbxassetid://10734905665",
["music-4"] = "rbxassetid://10734905823",
["navigation"] = "rbxassetid://10734906744",
["navigation-2"] = "rbxassetid://10734906332",
["navigation-2-off"] = "rbxassetid://10734906144",
["navigation-off"] = "rbxassetid://10734906580",
["network"] = "rbxassetid://10734906975",
["newspaper"] = "rbxassetid://10734907168",
["octagon"] = "rbxassetid://10734907361",
["option"] = "rbxassetid://10734907649",
["outdent"] = "rbxassetid://10734907933",
["package"] = "rbxassetid://10734909540",
["package-2"] = "rbxassetid://10734908151",
["package-check"] = "rbxassetid://10734908384",
["package-minus"] = "rbxassetid://10734908626",
["package-open"] = "rbxassetid://10734908793",
["package-plus"] = "rbxassetid://10734909016",
["package-search"] = "rbxassetid://10734909196",
["package-x"] = "rbxassetid://10734909375",
["paint-bucket"] = "rbxassetid://10734909847",
["paintbrush"] = "rbxassetid://10734910187",
["paintbrush-2"] = "rbxassetid://10734910030",
["palette"] = "rbxassetid://10734910430",
["palmtree"] = "rbxassetid://10734910680",
["paperclip"] = "rbxassetid://10734910927",
["party-popper"] = "rbxassetid://10734918735",
["pause"] = "rbxassetid://10734919336",
["pause-circle"] = "rbxassetid://10735024209",
["pause-octagon"] = "rbxassetid://10734919143",
["pen-tool"] = "rbxassetid://10734919503",
["pencil"] = "rbxassetid://10734919691",
["percent"] = "rbxassetid://10734919919",
["person-standing"] = "rbxassetid://10734920149",
["phone"] = "rbxassetid://10734921524",
["phone-call"] = "rbxassetid://10734920305",
["phone-forwarded"] = "rbxassetid://10734920508",
["phone-incoming"] = "rbxassetid://10734920694",
["phone-missed"] = "rbxassetid://10734920845",
["phone-off"] = "rbxassetid://10734921077",
["phone-outgoing"] = "rbxassetid://10734921288",
["pie-chart"] = "rbxassetid://10734921727",
["piggy-bank"] = "rbxassetid://10734921935",
["pin"] = "rbxassetid://10734922324",
["pin-off"] = "rbxassetid://10734922180",
["pipette"] = "rbxassetid://10734922497",
["pizza"] = "rbxassetid://10734922774",
["plane"] = "rbxassetid://10734922971",
["play"] = "rbxassetid://10734923549",
["play-circle"] = "rbxassetid://10734923214",
["plus"] = "rbxassetid://10734924532",
["plus-circle"] = "rbxassetid://10734923868",
["plus-square"] = "rbxassetid://10734924219",
["podcast"] = "rbxassetid://10734929553",
["pointer"] = "rbxassetid://10734929723",
["pound-sterling"] = "rbxassetid://10734929981",
["power"] = "rbxassetid://10734930466",
["power-off"] = "rbxassetid://10734930257",
["printer"] = "rbxassetid://10734930632",
["puzzle"] = "rbxassetid://10734930886",
["quote"] = "rbxassetid://10734931234",
["radio"] = "rbxassetid://10734931596",
["radio-receiver"] = "rbxassetid://10734931402",
["rectangle-horizontal"] = "rbxassetid://10734931777",
["rectangle-vertical"] = "rbxassetid://10734932081",
["recycle"] = "rbxassetid://10734932295",
["redo"] = "rbxassetid://10734932822",
["redo-2"] = "rbxassetid://10734932586",
["refresh-ccw"] = "rbxassetid://10734933056",
["refresh-cw"] = "rbxassetid://10734933222",
["refrigerator"] = "rbxassetid://10734933465",
["regex"] = "rbxassetid://10734933655",
["repeat"] = "rbxassetid://10734933966",
["repeat-1"] = "rbxassetid://10734933826",
["reply"] = "rbxassetid://10734934252",
["reply-all"] = "rbxassetid://10734934132",
["rewind"] = "rbxassetid://10734934347",
["rocket"] = "rbxassetid://10734934585",
["rocking-chair"] = "rbxassetid://10734939942",
["rotate-3d"] = "rbxassetid://10734940107",
["rotate-ccw"] = "rbxassetid://10734940376",
["rotate-cw"] = "rbxassetid://10734940654",
["rss"] = "rbxassetid://10734940825",
["ruler"] = "rbxassetid://10734941018",
["russian-ruble"] = "rbxassetid://10734941199",
["sailboat"] = "rbxassetid://10734941354",
["save"] = "rbxassetid://10734941499",
["scale"] = "rbxassetid://10734941912",
["scale-3d"] = "rbxassetid://10734941739",
["scaling"] = "rbxassetid://10734942072",
["scan"] = "rbxassetid://10734942565",
["scan-face"] = "rbxassetid://10734942198",
["scan-line"] = "rbxassetid://10734942351",
["scissors"] = "rbxassetid://10734942778",
["screen-share"] = "rbxassetid://10734943193",
["screen-share-off"] = "rbxassetid://10734942967",
["scroll"] = "rbxassetid://10734943448",
["search"] = "rbxassetid://10734943674",
["send"] = "rbxassetid://10734943902",
["separator-horizontal"] = "rbxassetid://10734944115",
["separator-vertical"] = "rbxassetid://10734944326",
["server"] = "rbxassetid://10734949856",
["server-cog"] = "rbxassetid://10734944444",
["server-crash"] = "rbxassetid://10734944554",
["server-off"] = "rbxassetid://10734944668",
["settings"] = "rbxassetid://10734950309",
["settings-2"] = "rbxassetid://10734950020",
["share"] = "rbxassetid://10734950813",
["share-2"] = "rbxassetid://10734950553",
["sheet"] = "rbxassetid://10734951038",
["shield"] = "rbxassetid://10734951847",
["shield-alert"] = "rbxassetid://10734951173",
["shield-check"] = "rbxassetid://10734951367",
["shield-close"] = "rbxassetid://10734951535",
["shield-off"] = "rbxassetid://10734951684",
["shirt"] = "rbxassetid://10734952036",
["shopping-bag"] = "rbxassetid://10734952273",
["shopping-cart"] = "rbxassetid://10734952479",
["shovel"] = "rbxassetid://10734952773",
["shower-head"] = "rbxassetid://10734952942",
["shrink"] = "rbxassetid://10734953073",
["shrub"] = "rbxassetid://10734953241",
["shuffle"] = "rbxassetid://10734953451",
["sidebar"] = "rbxassetid://10734954301",
["sidebar-close"] = "rbxassetid://10734953715",
["sidebar-open"] = "rbxassetid://10734954000",
["sigma"] = "rbxassetid://10734954538",
["signal"] = "rbxassetid://10734961133",
["signal-high"] = "rbxassetid://10734954807",
["signal-low"] = "rbxassetid://10734955080",
["signal-medium"] = "rbxassetid://10734955336",
["signal-zero"] = "rbxassetid://10734960878",
["siren"] = "rbxassetid://10734961284",
["skip-back"] = "rbxassetid://10734961526",
["skip-forward"] = "rbxassetid://10734961809",
["skull"] = "rbxassetid://10734962068",
["slack"] = "rbxassetid://10734962339",
["slash"] = "rbxassetid://10734962600",
["slice"] = "rbxassetid://10734963024",
["sliders"] = "rbxassetid://10734963400",
["sliders-horizontal"] = "rbxassetid://10734963191",
["smartphone"] = "rbxassetid://10734963940",
["smartphone-charging"] = "rbxassetid://10734963671",
["smile"] = "rbxassetid://10734964441",
["smile-plus"] = "rbxassetid://10734964188",
["snowflake"] = "rbxassetid://10734964600",
["sofa"] = "rbxassetid://10734964852",
["sort-asc"] = "rbxassetid://10734965115",
["sort-desc"] = "rbxassetid://10734965287",
["speaker"] = "rbxassetid://10734965419",
["sprout"] = "rbxassetid://10734965572",
["square"] = "rbxassetid://10734965702",
["star"] = "rbxassetid://10734966248",
["star-half"] = "rbxassetid://10734965897",
["star-off"] = "rbxassetid://10734966097",
["stethoscope"] = "rbxassetid://10734966384",
["sticker"] = "rbxassetid://10734972234",
["sticky-note"] = "rbxassetid://10734972463",
["stop-circle"] = "rbxassetid://10734972621",
["stretch-horizontal"] = "rbxassetid://10734972862",
["stretch-vertical"] = "rbxassetid://10734973130",
["strikethrough"] = "rbxassetid://10734973290",
["subscript"] = "rbxassetid://10734973457",
["sun"] = "rbxassetid://10734974297",
["sun-dim"] = "rbxassetid://10734973645",
["sun-medium"] = "rbxassetid://10734973778",
["sun-moon"] = "rbxassetid://10734973999",
["sun-snow"] = "rbxassetid://10734974130",
["sunrise"] = "rbxassetid://10734974522",
["sunset"] = "rbxassetid://10734974689",
["superscript"] = "rbxassetid://10734974850",
["swiss-franc"] = "rbxassetid://10734975024",
["switch-camera"] = "rbxassetid://10734975214",
["sword"] = "rbxassetid://10734975486",
["swords"] = "rbxassetid://10734975692",
["syringe"] = "rbxassetid://10734975932",
["table"] = "rbxassetid://10734976230",
["table-2"] = "rbxassetid://10734976097",
["tablet"] = "rbxassetid://10734976394",
["tag"] = "rbxassetid://10734976528",
["tags"] = "rbxassetid://10734976739",
["target"] = "rbxassetid://10734977012",
["tent"] = "rbxassetid://10734981750",
["terminal"] = "rbxassetid://10734982144",
["terminal-square"] = "rbxassetid://10734981995",
["text-cursor"] = "rbxassetid://10734982395",
["text-cursor-input"] = "rbxassetid://10734982297",
["thermometer"] = "rbxassetid://10734983134",
["thermometer-snowflake"] = "rbxassetid://10734982571",
["thermometer-sun"] = "rbxassetid://10734982771",
["thumbs-down"] = "rbxassetid://10734983359",
["thumbs-up"] = "rbxassetid://10734983629",
["ticket"] = "rbxassetid://10734983868",
["timer"] = "rbxassetid://10734984606",
["timer-off"] = "rbxassetid://10734984138",
["timer-reset"] = "rbxassetid://10734984355",
["toggle-left"] = "rbxassetid://10734984834",
["toggle-right"] = "rbxassetid://10734985040",
["tornado"] = "rbxassetid://10734985247",
["toy-brick"] = "rbxassetid://10747361919",
["train"] = "rbxassetid://10747362105",
["trash"] = "rbxassetid://10747362393",
["trash-2"] = "rbxassetid://10747362241",
["tree-deciduous"] = "rbxassetid://10747362534",
["tree-pine"] = "rbxassetid://10747362748",
["trees"] = "rbxassetid://10747363016",
["trending-down"] = "rbxassetid://10747363205",
["trending-up"] = "rbxassetid://10747363465",
["triangle"] = "rbxassetid://10747363621",
["trophy"] = "rbxassetid://10747363809",
["truck"] = "rbxassetid://10747364031",
["tv"] = "rbxassetid://10747364593",
["tv-2"] = "rbxassetid://10747364302",
["type"] = "rbxassetid://10747364761",
["umbrella"] = "rbxassetid://10747364971",
["underline"] = "rbxassetid://10747365191",
["undo"] = "rbxassetid://10747365484",
["undo-2"] = "rbxassetid://10747365359",
["unlink"] = "rbxassetid://10747365771",
["unlink-2"] = "rbxassetid://10747397871",
["unlock"] = "rbxassetid://10747366027",
["upload"] = "rbxassetid://10747366434",
["upload-cloud"] = "rbxassetid://10747366266",
["usb"] = "rbxassetid://10747366606",
["user"] = "rbxassetid://10747373176",
["user-check"] = "rbxassetid://10747371901",
["user-cog"] = "rbxassetid://10747372167",
["user-minus"] = "rbxassetid://10747372346",
["user-plus"] = "rbxassetid://10747372702",
["user-x"] = "rbxassetid://10747372992",
["users"] = "rbxassetid://10747373426",
["utensils"] = "rbxassetid://10747373821",
["utensils-crossed"] = "rbxassetid://10747373629",
["venetian-mask"] = "rbxassetid://10747374003",
["verified"] = "rbxassetid://10747374131",
["vibrate"] = "rbxassetid://10747374489",
["vibrate-off"] = "rbxassetid://10747374269",
["video"] = "rbxassetid://10747374938",
["video-off"] = "rbxassetid://10747374721",
["view"] = "rbxassetid://10747375132",
["voicemail"] = "rbxassetid://10747375281",
["volume"] = "rbxassetid://10747376008",
["volume-1"] = "rbxassetid://10747375450",
["volume-2"] = "rbxassetid://10747375679",
["volume-x"] = "rbxassetid://10747375880",
["wallet"] = "rbxassetid://10747376205",
["wand"] = "rbxassetid://10747376565",
["wand-2"] = "rbxassetid://10747376349",
["watch"] = "rbxassetid://10747376722",
["waves"] = "rbxassetid://10747376931",
["webcam"] = "rbxassetid://10747381992",
["wifi"] = "rbxassetid://10747382504",
["wifi-off"] = "rbxassetid://10747382268",
["wind"] = "rbxassetid://10747382750",
["wrap-text"] = "rbxassetid://10747383065",
["wrench"] = "rbxassetid://10747383470",
["x"] = "rbxassetid://10747384394",
["x-circle"] = "rbxassetid://10747383819",
["x-octagon"] = "rbxassetid://10747384037",
["x-square"] = "rbxassetid://10747384217",
["zoom-in"] = "rbxassetid://10747384552",
["zoom-out"] = "rbxassetid://10747384679"
}

local function detectDevice()
local platform = UserInputService:GetPlatform()
local deviceType = "Unknown"
if platform == Enum.Platform.Windows or platform == Enum.Platform.OSX or platform == Enum.Platform.UWP then
deviceType = "PC"
elseif platform == Enum.Platform.IOS or platform == Enum.Platform.Android then
deviceType = "Mobile"
elseif UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
deviceType = "Mobile"
elseif UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
deviceType = "PC"
end
return deviceType, platform
end

local function resolveIcon(iconInput)
if not iconInput or iconInput == "" then
return nil
end
if string.match(iconInput, "rbxassetid://") then
return iconInput
end
local resolvedIcon = LucideIcons[iconInput]
if resolvedIcon then
return resolvedIcon
end
return iconInput
end

local Linux = {}
local globalConnectionManager = ConnectionManager.new()
Linux.CurrentAccent = "Black & White"
Linux.SelectedAccent = "Black & White"
Linux.Accents = {
Orange = Color3.fromRGB(240, 140, 0),
Purple = Color3.fromRGB(100, 59, 154),
Blue = Color3.fromRGB(59, 130, 246),
Red = Color3.fromRGB(255, 0, 0),
Green = Color3.fromRGB(34, 197, 94),
["Black & White"] = Color3.fromRGB(255, 255, 255)
}
Linux.AccentElements = {}
Linux.CheckboxElements = {}
Linux.ToggleElements = {}
Linux.SliderElements = {}
Linux.CurrentActiveSlider = nil
Linux.SectionElements = {}
Linux.TabIconElements = {}
Linux.CurrentTab = nil
Linux.DeviceType = detectDevice()
Linux.ActiveNotifications = {}
Linux.NotificationCounter = 0
Linux.FrameTransparency = 0.78
Linux.FrameColor = Color3.fromRGB(60, 60, 60)
Linux.MainFrameColor = Color3.fromRGB(12, 12, 12)
Linux.ToggleIconAssetId = "rbxassetid://99020804096711"
Linux.IgnoredElements = {}
Linux.SavedConfigs = {}
Linux.CurrentConfig = ""
Linux.ConfigFolder = "Linux"
Linux.AutoLoadEnabled = false
Linux.AutoLoadConfig = ""
Linux.PrivacyEnabled = false
Linux.AdminDetectorEnabled = false
Linux.AdminDetectorAction = "Notify"
Linux.SavedElements = {}
Linux.TabSections = {}
Linux.CurrentLanguage = "EN"
Linux.SelectedLanguage = "EN"
Linux.Translations = {}
Linux.TranslatableElements = {}
Linux.TabHighlight = true
Linux.DropdownBar = true
Linux.LineEnabled = true
Linux.ShowSliderMax = false
Linux.TabIconAccentColorEnabled = false
Linux.BackgroundImage = nil
Linux.BackgroundSettings = {
Image = "",
Transparency = 0.8
}
Linux.SavedResize = {
Width = nil,
Height = nil
}
Linux.DefaultResize = {
Width = 620,
Height = 395
}
Linux.LanguageSection = nil
Linux.LanguageDropdown = nil
Linux.LanguageButton = nil
Linux.SettingsTab = nil

function Linux.SetIgnoreIndexes(names)
for _, name in ipairs(names) do
Linux.IgnoredElements[name] = true
end
end

function Linux.SetLanguage(lang)
if not Linux.Translations[lang] then
warn("Language '" .. lang .. "' not found. Using default 'EN'")
Linux.CurrentLanguage = "EN"
return false
end
Linux.CurrentLanguage = lang
Linux.SelectedLanguage = lang
return true
end

function Linux.Translate(key)
local currentLang = Linux.Translations[Linux.CurrentLanguage]
if currentLang and currentLang[key] then
return currentLang[key]
end
local fallback = Linux.Translations["EN"]
if fallback and fallback[key] then
return fallback[key]
end
return key
end

function Linux.AddTranslations(translations)
for lang, keys in pairs(translations) do
if not Linux.Translations[lang] then
Linux.Translations[lang] = {}
end
for key, value in pairs(keys) do
Linux.Translations[lang][key] = value
end
end
if Linux.RefreshLanguageSettings then
task.spawn(function()
task.wait()
Linux.RefreshLanguageSettings()
end)
end
end

function Linux.RefreshLanguageSettings()
if not Linux.SettingsTab then
return
end
local availableLanguages = {}
for lang, _ in pairs(Linux.Translations) do
table.insert(availableLanguages, lang)
end
	if #availableLanguages > 0 then
		if not Linux.LanguageSection then
			Linux.LanguageSection = Linux.SettingsTab.Section({ Name = "Language" })
		end
		if not Linux.LanguageDropdown then
			Linux.LanguageDropdown = Linux.SettingsTab.Dropdown({
				Name = "Select Language",
				Description = "Select an available language",
				Options = availableLanguages,
				Default = Linux.SelectedLanguage,
				Callback = function(selected)
					Linux.SelectedLanguage = selected
				end
			})
		else
			if Linux.LanguageDropdown.SetOptions then
				Linux.LanguageDropdown.SetOptions(availableLanguages)
			end
			if Linux.LanguageDropdown.SetValue then
				Linux.LanguageDropdown.SetValue(Linux.SelectedLanguage)
			end
		end
		if not Linux.LanguageButton then
			Linux.LanguageButton = Linux.SettingsTab.Button({
				Name = "Apply Language",
				Description = "Apply the selected Language",
				Callback = function()
					Linux.ApplyLanguage(Linux.SelectedLanguage)
				end
			})
		end
	end
end

function Linux.RegisterTranslatableElement(element, key, textProperty, descriptionElement, descriptionKey, placeholderKey)
local transData = {
Element = element,
Key = key,
Property = textProperty or "Text",
DescriptionElement = descriptionElement,
DescriptionKey = descriptionKey,
PlaceholderKey = placeholderKey
}
table.insert(Linux.TranslatableElements, transData)
end

function Linux.ApplyLanguage(lang)
if not Linux.Translations[lang] then
warn("Language '" .. lang .. "' not found.")
return false
end
Linux.CurrentLanguage = lang
for _, data in pairs(Linux.TranslatableElements) do
if data.Element and data.Element.Parent then
local isSettingsTab = false
local currentParent = data.Element
while currentParent do
if currentParent.Name == "SettingsTab" or (currentParent:IsA("ScrollingFrame") and currentParent.Parent and currentParent.Parent.Name == "SettingsTab") then
isSettingsTab = true
break
end
currentParent = currentParent.Parent
end

if not isSettingsTab then
local translated = Linux.Translate(data.Key)
if data.Element:IsA("TextLabel") or data.Element:IsA("TextButton") or data.Element:IsA("TextBox") then
local fadeOutTween = TweenService:Create(data.Element, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { TextTransparency = 1 })
globalConnectionManager:addTween(fadeOutTween)
fadeOutTween:Play()
fadeOutTween.Completed:Connect(function()
data.Element[data.Property] = translated
local fadeInTween = TweenService:Create(data.Element, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = 0 })
globalConnectionManager:addTween(fadeInTween)
fadeInTween:Play()
end)
end
if data.DescriptionElement and data.DescriptionKey and data.DescriptionElement.Parent then
local descTranslated = Linux.Translate(data.DescriptionKey)
if data.DescriptionElement:IsA("TextLabel") then
local fadeOutTween = TweenService:Create(data.DescriptionElement, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { TextTransparency = 1 })
globalConnectionManager:addTween(fadeOutTween)
fadeOutTween:Play()
fadeOutTween.Completed:Connect(function()
data.DescriptionElement.Text = descTranslated
local fadeInTween = TweenService:Create(data.DescriptionElement, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = 0 })
globalConnectionManager:addTween(fadeInTween)
fadeInTween:Play()
end)
end
end
if data.PlaceholderKey and data.Element:IsA("TextBox") then
local placeholderTranslated = Linux.Translate(data.PlaceholderKey)
data.Element.PlaceholderText = placeholderTranslated
end
end
end
end
return true
end

function Linux.Instance(class, props)
local inst = Instance.new(class)
for k, v in pairs(props or {}) do
inst[k] = v
end
return inst
end

function Linux.RegisterAccentElement(element)
table.insert(Linux.AccentElements, element)
end

function Linux.RegisterToggleElement(element)
table.insert(Linux.ToggleElements, element)
end

function Linux.RegisterSliderElement(element)
table.insert(Linux.SliderElements, element)
end

function Linux.RegisterSectionElement(element)
table.insert(Linux.SectionElements, element)
end

function Linux.RegisterTabIconElement(element)
table.insert(Linux.TabIconElements, element)
end

function Linux.ValidateResizeSize(width, height)
local minWidth = 400
local minHeight = 300
local maxWidth = 1200
local maxHeight = 800
width = math.clamp(width, minWidth, maxWidth)
height = math.clamp(height, minHeight, maxHeight)
return width, height
end

function Linux.SaveResizeSettings()
local success, result = pcall(function()
local resizeData = {
Width = Linux.SavedResize.Width,
Height = Linux.SavedResize.Height
}
local json = HttpService:JSONEncode(resizeData)
if writefile then
if not isfolder(Linux.ConfigFolder) then
makefolder(Linux.ConfigFolder)
end
writefile(Linux.ConfigFolder .. "/resize.json", json)
return true
else
return false, "writefile function not available"
end
end)
if not success then
print("Error saving resize settings:", result)
end
return success, result
end

function Linux.LoadResizeSettings()
local success, result = pcall(function()
if readfile and isfile(Linux.ConfigFolder .. "/resize.json") then
local json = readfile(Linux.ConfigFolder .. "/resize.json")
local resizeData = HttpService:JSONDecode(json)
Linux.SavedResize.Width = resizeData.Width or Linux.DefaultResize.Width
Linux.SavedResize.Height = resizeData.Height or Linux.DefaultResize.Height
return true
else
return false, "Resize settings file not found"
end
end)
if not success then
print("Error loading resize settings:", result)
end
return success, result
end

function Linux.UpdateBackgroundImage()
if Linux.BackgroundImage and Linux.BackgroundImage.Parent then
Linux.BackgroundImage.Image = Linux.BackgroundSettings.Image
Linux.BackgroundImage.ImageTransparency = Linux.BackgroundSettings.Transparency
end
end

function Linux.ApplyAccent(accentName)
if not Linux.Accents[accentName] then return end
local newColor = Linux.Accents[accentName]
Linux.CurrentAccent = accentName
for _, element in pairs(Linux.AccentElements) do
if element and element.Parent then
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(element, tweenInfo, { BackgroundColor3 = newColor })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
for _, checkboxData in pairs(Linux.CheckboxElements) do
local checkbox = checkboxData.Checkbox
if checkbox and checkbox.Parent and checkbox:GetAttribute("State") == true then
local thisBox = checkbox:FindFirstChild("Box")
local thisIcon = thisBox and thisBox:FindFirstChild("CheckIcon")
if thisBox and thisIcon then
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if accentName == "Black & White" then
local tween1 = TweenService:Create(thisBox, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
local tween2 = TweenService:Create(thisIcon, tweenInfo, { ImageColor3 = Color3.fromRGB(0, 0, 0) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
else
local tween1 = TweenService:Create(thisBox, tweenInfo, { BackgroundColor3 = newColor })
local tween2 = TweenService:Create(thisIcon, tweenInfo, { ImageColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end
end
end
end
for _, element in pairs(Linux.SectionElements) do
if element and element.Parent then
local targetColor = newColor
if accentName == "Black & White" then
targetColor = Color3.fromRGB(255, 255, 255)
end
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(element, tweenInfo, { ImageColor3 = targetColor })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
if Linux.TabIconAccentColorEnabled then
local targetColor = newColor
if accentName == "Black & White" then
targetColor = Color3.fromRGB(210, 210, 210)
end
for _, element in pairs(Linux.TabIconElements) do
if element and element.Parent then
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(element, tweenInfo, { ImageColor3 = targetColor })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
end
if accentName == "Black & White" then
for _, element in pairs(Linux.ToggleElements) do
if element and element.Parent then
local track = element:FindFirstChild("Track")
local knob = track and track:FindFirstChild("Knob")
if track and knob then
local isToggled = element:GetAttribute("State")
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if isToggled then
local tween1 = TweenService:Create(track, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
local tween2 = TweenService:Create(knob, tweenInfo, { BackgroundColor3 = Color3.fromRGB(0, 0, 0) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end
end
end
end
for _, element in pairs(Linux.SliderElements) do
if element and element.Parent then
local bar = element:FindFirstChild("Bar")
local knob = bar and bar:FindFirstChild("Knob")
if bar and knob then
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(knob, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
end
else
for _, element in pairs(Linux.ToggleElements) do
if element and element.Parent then
local track = element:FindFirstChild("Track")
local knob = track and track:FindFirstChild("Knob")
if track and knob then
local isToggled = element:GetAttribute("State")
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if isToggled then
local tween1 = TweenService:Create(track, tweenInfo, { BackgroundColor3 = newColor })
local tween2 = TweenService:Create(knob, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
else
local tween = TweenService:Create(knob, tweenInfo, { BackgroundColor3 = Color3.fromRGB(200, 200, 210) })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
end
end
for _, element in pairs(Linux.SliderElements) do
if element and element.Parent then
local bar = element:FindFirstChild("Bar")
local knob = bar and bar:FindFirstChild("Knob")
if bar and knob then
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(knob, tweenInfo, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
end
end
end

function Linux.SaveAccentSettings()
local success, result = pcall(function()
local accentData = {
Accent = Linux.CurrentAccent
}
local json = HttpService:JSONEncode(accentData)
if writefile then
if not isfolder(Linux.ConfigFolder) then
makefolder(Linux.ConfigFolder)
end
writefile(Linux.ConfigFolder .. "/accent.json", json)
return true
else
return false, "writefile function not available"
end
end)
if not success then
print("Error saving accent settings:", result)
end
return success, result
end

function Linux.LoadAccentSettings()
local success, result = pcall(function()
if readfile and isfile(Linux.ConfigFolder .. "/accent.json") then
local json = readfile(Linux.ConfigFolder .. "/accent.json")
local accentData = HttpService:JSONDecode(json)
Linux.CurrentAccent = accentData.Accent or "Black & White"
Linux.SelectedAccent = Linux.CurrentAccent
return true
else
return false, "Accent settings file not found"
end
end)
if not success then
print("Error loading accent settings:", result)
end
return success, result
end

function Linux:SafeCallback(Function, ...)
if not Function then
return
end
if not globalConnectionManager:isActive() then
return
end
local Success, ErrorMessage = pcall(Function, ...)
if not Success then
local errorText = "Unknown error occurred"
if ErrorMessage then
if type(ErrorMessage) == "string" then
local _, i = ErrorMessage:find(":%d+:")
if not i then
errorText = ErrorMessage
else
errorText = ErrorMessage:sub(i + 1)
end
elseif type(ErrorMessage) == "table" and ErrorMessage.message then
errorText = tostring(ErrorMessage.message)
else
errorText = tostring(ErrorMessage)
end
end
print("Callback error:", errorText)
self:Notify({
Title = "Callback Error",
Content = errorText,
Duration = 5
})
end
end

function Linux.RepositionNotifications()
local isMobile = Linux.DeviceType == "Mobile"
local spacing = 10
local startOffset = 10
for i, notificationData in ipairs(Linux.ActiveNotifications) do
if notificationData.Frame and notificationData.Frame.Parent then
local yOffset = startOffset
for j = 1, i - 1 do
if Linux.ActiveNotifications[j] and Linux.ActiveNotifications[j].Frame and Linux.ActiveNotifications[j].Frame.Parent then
yOffset = yOffset + Linux.ActiveNotifications[j].Frame.Size.Y.Offset + spacing
end
end
local targetPosition = UDim2.new(1, -(isMobile and 250 or 380), 1, -yOffset - notificationData.Frame.Size.Y.Offset)
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(notificationData.Frame, tweenInfo, { Position = targetPosition })
globalConnectionManager:addTween(tween)
tween:Play()
end
end
end

function Linux.RemoveNotification(notificationId)
for i, notificationData in ipairs(Linux.ActiveNotifications) do
if notificationData.Id == notificationId then
table.remove(Linux.ActiveNotifications, i)
break
end
end
Linux.RepositionNotifications()
end

function Linux:Notify(config)
local isMobile = Linux.DeviceType == "Mobile"
local parent = RunService:IsStudio() and LocalPlayer.PlayerGui or game:GetService("CoreGui")
Linux.NotificationCounter = Linux.NotificationCounter + 1
local notificationId = Linux.NotificationCounter
local NotificationHolder = Linux.Instance("ScreenGui", {
Name = "NotificationHolder_" .. notificationId,
Parent = parent,
ResetOnSpawn = false,
Enabled = true,
ZIndexBehavior = Enum.ZIndexBehavior.Sibling
})
pcall(function()
NotificationHolder.IgnoreGuiInset = true
end)
local success = pcall(function()
if sethiddenproperty then
sethiddenproperty(NotificationHolder, "ScreenInsets", Enum.ScreenInsets.DeviceSafeInsets)
end
end)
local titleText = config.Title or "Notification"
local contentText = config.Content or "Content"
local subContentText = config.SubContent or ""
local hasLogo = config.Logo and config.Logo ~= ""
local logoIcon = nil
local logoSize = 0
local logoOffset = 0
if hasLogo then
logoIcon = resolveIcon(config.Logo)
if logoIcon then
logoSize = 20
logoOffset = 30
end
end
local notificationWidth = isMobile and 250 or 350
local notificationHeight = config.SubContent and 80 or 60
local Notification = Linux.Instance("Frame", {
Parent = NotificationHolder,
BackgroundColor3 = Color3.fromRGB(18, 18, 18),
BackgroundTransparency = 0.11,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(0, notificationWidth, 0, notificationHeight),
Position = UDim2.new(1, 10, 1, -notificationHeight - 10),
ZIndex = 100
})
Linux.Instance("UICorner", {
Parent = Notification,
CornerRadius = UDim.new(0, 6)
})
Linux.Instance("UIStroke", {
Parent = Notification,
Color = Color3.fromRGB(30, 30, 30),
Thickness = 1
})
if hasLogo and logoIcon then
local NotificationIcon = Linux.Instance("ImageLabel", {
Parent = Notification,
BackgroundTransparency = 1,
Size = UDim2.new(0, logoSize, 0, logoSize),
Position = UDim2.new(0, 8, 0.5, -logoSize / 2),
Image = logoIcon,
ImageColor3 = Color3.fromRGB(255, 255, 255),
ZIndex = 101
})
if config.IconGradient and config.IconGradient.Enabled then
local iconGradient = Linux.Instance("UIGradient", {
Parent = NotificationIcon,
Color = config.IconGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
},
Rotation = config.IconGradient.Rotation or 0
})
end
end
local CloseButton = Linux.Instance("ImageButton", {
Parent = Notification,
BackgroundTransparency = 1,
Size = UDim2.new(0, 14, 0, 14),
Position = UDim2.new(1, -20, 0, 4),
Image = "rbxassetid://10747384394",
ImageColor3 = Color3.fromRGB(180, 180, 190),
ZIndex = 102,
AutoButtonColor = false
})
Linux.Instance("TextLabel", {
Parent = Notification,
BackgroundTransparency = 1,
Size = UDim2.new(1, -logoOffset - 40, 0, 20),
Position = UDim2.new(0, 5 + logoOffset, 0, 5),
Font = Enum.Font.GothamSemibold,
Text = titleText,
TextColor3 = Color3.fromRGB(230, 230, 240),
TextSize = 16,
TextWrapped = true,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Top,
ZIndex = 101
})
Linux.Instance("TextLabel", {
Parent = Notification,
BackgroundTransparency = 1,
Size = UDim2.new(1, -logoOffset - 40, 0, 30),
Position = UDim2.new(0, 5 + logoOffset, 0, 25),
Font = Enum.Font.GothamSemibold,
Text = contentText,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextWrapped = true,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Top,
ZIndex = 101
})
if config.SubContent then
Linux.Instance("TextLabel", {
Parent = Notification,
BackgroundTransparency = 1,
Size = UDim2.new(1, -logoOffset - 40, 0, 20),
Position = UDim2.new(0, 5 + logoOffset, 0, 45),
Font = Enum.Font.GothamSemibold,
Text = config.SubContent,
TextColor3 = Color3.fromRGB(180, 180, 190),
TextSize = 11,
TextWrapped = true,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Top,
ZIndex = 101
})
end
local ProgressBar = Linux.Instance("Frame", {
Parent = Notification,
BackgroundColor3 = Color3.fromRGB(20, 20, 21),
Size = UDim2.new(1, -10, 0, 4),
Position = UDim2.new(0, 5, 1, -9),
ZIndex = 101,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
Linux.Instance("UICorner", {
Parent = ProgressBar,
CornerRadius = UDim.new(1, 0)
})
local ProgressFill = Linux.Instance("Frame", {
Parent = ProgressBar,
BackgroundColor3 = Linux.Accents[Linux.CurrentAccent],
Size = UDim2.new(0, 0, 1, 0),
ZIndex = 101,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
Linux.Instance("UICorner", {
Parent = ProgressFill,
CornerRadius = UDim.new(1, 0)
})
if config.ProgressGradient and config.ProgressGradient.Enabled then
local progressGradient = Linux.Instance("UIGradient", {
Parent = ProgressFill,
Color = config.ProgressGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
},
Rotation = config.ProgressGradient.Rotation or 0
})
else
Linux.RegisterAccentElement(ProgressFill)
end
table.insert(Linux.ActiveNotifications, {
Id = notificationId,
Frame = Notification,
Holder = NotificationHolder
})
Linux.RepositionNotifications()
local function closeNotification()
if globalConnectionManager:isActive() then
local exitTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local exitTween = TweenService:Create(Notification, exitTweenInfo, { Position = UDim2.new(1, 10, Notification.Position.Y.Scale, Notification.Position.Y.Offset) })
globalConnectionManager:addTween(exitTween)
exitTween:Play()
Linux.RemoveNotification(notificationId)
task.wait(0.5)
if NotificationHolder and NotificationHolder.Parent then
NotificationHolder:Destroy()
end
end
end
globalConnectionManager:addConnection(CloseButton.MouseButton1Click:Connect(function()
closeNotification()
end))
globalConnectionManager:addConnection(CloseButton.MouseEnter:Connect(function()
local tween = TweenService:Create(CloseButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(CloseButton.MouseLeave:Connect(function()
local tween = TweenService:Create(CloseButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(180, 180, 190) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
if config.Duration then
local progressTweenInfo = TweenInfo.new(config.Duration, Enum.EasingStyle.Linear, Enum.EasingDirection.In)
local progressTween = TweenService:Create(ProgressFill, progressTweenInfo, { Size = UDim2.new(1, 0, 1, 0) })
globalConnectionManager:addTween(progressTween)
progressTween:Play()
task.delay(config.Duration, function()
closeNotification()
end)
end
end

function Linux.SaveAutoLoadSettings()
local success, result = pcall(function()
local autoLoadData = {
Enabled = Linux.AutoLoadEnabled,
ConfigName = Linux.AutoLoadConfig
}
local json = HttpService:JSONEncode(autoLoadData)
if writefile then
if not isfolder(Linux.ConfigFolder) then
makefolder(Linux.ConfigFolder)
end
writefile(Linux.ConfigFolder .. "/autoload.json", json)
return true
else
return false, "writefile function not available"
end
end)
if not success then
print("Error saving autoload settings:", result)
end
return success, result
end

function Linux.LoadAutoLoadSettings()
local success, result = pcall(function()
if readfile and isfile(Linux.ConfigFolder .. "/autoload.json") then
local json = readfile(Linux.ConfigFolder .. "/autoload.json")
local autoLoadData = HttpService:JSONDecode(json)
Linux.AutoLoadEnabled = autoLoadData.Enabled or false
Linux.AutoLoadConfig = autoLoadData.ConfigName or ""
return true
else
return false, "Auto load settings file not found"
end
end)
if not success then
print("Error loading autoload settings:", result)
end
return success, result
end

function Linux.SavePrivacySettings()
local success, result = pcall(function()
local privacyData = {
Enabled = Linux.PrivacyEnabled
}
local json = HttpService:JSONEncode(privacyData)
if writefile then
if not isfolder(Linux.ConfigFolder) then
makefolder(Linux.ConfigFolder)
end
writefile(Linux.ConfigFolder .. "/privacy.json", json)
return true
else
return false, "writefile function not available"
end
end)
if not success then
print("Error saving privacy settings:", result)
end
return success, result
end

function Linux.LoadPrivacySettings()
	local success, result = pcall(function()
		if readfile and isfile(Linux.ConfigFolder .. "/privacy.json") then
			local json = readfile(Linux.ConfigFolder .. "/privacy.json")
			local privacyData = HttpService:JSONDecode(json)
			Linux.PrivacyEnabled = privacyData.Enabled or false
			return true
		else
			return false, "Privacy settings file not found"
		end
	end)
	if not success then
		print("Error loading privacy settings:", result)
	end
	return success, result
end

function Linux.SaveAdminDetectorSettings()
	local success, result = pcall(function()
		local adminDetectorData = {
			Enabled = Linux.AdminDetectorEnabled,
			Action = Linux.AdminDetectorAction
		}
		local json = HttpService:JSONEncode(adminDetectorData)
		if writefile then
			if not isfolder(Linux.ConfigFolder) then
				makefolder(Linux.ConfigFolder)
			end
			writefile(Linux.ConfigFolder .. "/admindetector.json", json)
			return true
		else
			return false, "writefile function not available"
		end
	end)
	if not success then
		print("Error saving admin detector settings:", result)
	end
	return success, result
end

function Linux.LoadAdminDetectorSettings()
	local success, result = pcall(function()
		if readfile and isfile(Linux.ConfigFolder .. "/admindetector.json") then
			local json = readfile(Linux.ConfigFolder .. "/admindetector.json")
			local adminDetectorData = HttpService:JSONDecode(json)
			Linux.AdminDetectorEnabled = adminDetectorData.Enabled or false
			Linux.AdminDetectorAction = adminDetectorData.Action or "Notify"
			return true
		else
			return false, "Admin detector settings file not found"
		end
	end)
	if not success then
		print("Error loading admin detector settings:", result)
	end
	return success, result
end

function Linux.SaveConfig(name)
if not name or name == "" then
print("[ERROR] Cannot save config: No name provided")
return false, "Config name cannot be empty"
end
if #name < 3 then
print("[ERROR] Cannot save config: Name too short (minimum 3 characters)")
return false, "Config name must be at least 3 characters"
end
if name:match("[^%w%s_-]") then
print("[ERROR] Cannot save config: Invalid characters in name")
return false, "Config name contains invalid characters. Use only letters, numbers, spaces, underscores and hyphens"
end
local configData = {
Elements = {},
ConfigName = name,
SaveTime = os.time()
}
for _, elementData in pairs(Linux.SavedElements or {}) do
local element = elementData.Element
local value = elementData.GetValue and elementData.GetValue() or nil
if value ~= nil and not Linux.IgnoredElements[element.Name] then
local elementInfo = {
Type = element.Type,
Name = element.Name,
TabName = elementData.TabName,
Value = nil
}
if element.Type == "Toggle" then
elementInfo.Value = value
elseif element.Type == "Slider" then
elementInfo.Value = value
elseif element.Type == "Dropdown" then
elementInfo.Value = value
elseif element.Type == "Input" then
elementInfo.Value = value
elseif element.Type == "ColorPicker" then
elementInfo.Value = { value.R, value.G, value.B }
end
if elementInfo.Value ~= nil then
table.insert(configData.Elements, elementInfo)
end
end
end
local success, result = pcall(function()
local json = HttpService:JSONEncode(configData)
if writefile then
if not isfolder(Linux.ConfigFolder) then
makefolder(Linux.ConfigFolder)
end
writefile(Linux.ConfigFolder .. "/" .. name .. ".json", json)
return true
else
return false, "writefile function not available"
end
end)
if success and result == true then
Linux.LoadConfigList()
print("[SUCCESS] Configuration '" .. name .. "' saved successfully!")
return true
else
print("[ERROR] Failed to save config '" .. name .. "':", result or "Unknown error")
return false, result or "Error saving configuration"
end
end

function Linux.LoadConfig(name)
if not name or name == "" then
print("[ERROR] Cannot load config: No name provided")
return false, "Config name cannot be empty"
end
local success, result = pcall(function()
if readfile and isfile(Linux.ConfigFolder .. "/" .. name .. ".json") then
local json = readfile(Linux.ConfigFolder .. "/" .. name .. ".json")
local configData = HttpService:JSONDecode(json)
if not configData or not configData.Elements then
return false, "Invalid configuration file format"
end
local loadedCount = 0
for _, elementInfo in pairs(configData.Elements) do
for _, elementData in pairs(Linux.SavedElements or {}) do
local element = elementData.Element
if element.Type == elementInfo.Type and element.Name == elementInfo.Name and elementData.TabName == elementInfo.TabName then
if elementData.IsAutoLoadInput then
continue
end
if element.Type == "Toggle" then
elementData.SetValue(elementInfo.Value)
loadedCount = loadedCount + 1
elseif element.Type == "Slider" then
elementData.SetValue(elementInfo.Value)
loadedCount = loadedCount + 1
elseif element.Type == "Dropdown" then
elementData.SetValue(elementInfo.Value)
loadedCount = loadedCount + 1
elseif element.Type == "Input" then
elementData.SetValue(elementInfo.Value)
loadedCount = loadedCount + 1
elseif element.Type == "ColorPicker" then
local colorData = elementInfo.Value
if type(colorData) == "table" and #colorData == 3 then
elementData.SetValue(Color3.fromRGB(colorData[1] * 255, colorData[2] * 255, colorData[3] * 255))
loadedCount = loadedCount + 1
end
end
end
end
end
Linux.CurrentConfig = name
if loadedCount == 0 then
print("[WARNING] Config '" .. name .. "' loaded but no settings were applied (config might be empty or incompatible)")
else
print("[SUCCESS] Config '" .. name .. "' loaded successfully! Applied " .. loadedCount .. " settings")
end
return true
else
return false, "Configuration file not found or readfile function not available"
end
end)
if not success then
print("[ERROR] Failed to load config '" .. name .. "':", result or "Unknown error")
end
return success, result
end

function Linux.DeleteConfig(name)
if not name or name == "" then
print("[ERROR] Cannot delete config: No name provided")
return false, "Config name cannot be empty"
end
local success, result = pcall(function()
if delfile and isfile(Linux.ConfigFolder .. "/" .. name .. ".json") then
delfile(Linux.ConfigFolder .. "/" .. name .. ".json")
return true
else
return false, "Configuration file not found or delfile function not available"
end
end)
if success and result == true then
Linux.LoadConfigList()
print("[SUCCESS] Config '" .. name .. "' deleted successfully!")
return true
else
print("[ERROR] Failed to delete config '" .. name .. "':", result or "Unknown error")
return false, result or "Error deleting configuration"
end
end

function Linux.LoadConfigList()
Linux.SavedConfigs = {}
local success, result = pcall(function()
if listfiles and isfolder(Linux.ConfigFolder) then
local files = listfiles(Linux.ConfigFolder)
for _, file in pairs(files) do
local fileName = string.match(file, "[^/\\]+$")
local configName = string.match(fileName, "(.+)%.json$")
if configName and configName ~= "autoload" and configName ~= "privacy" and configName ~= "accent" and configName ~= "resize" and configName ~= "language" and configName ~= "admindetector" then
table.insert(Linux.SavedConfigs, configName)
end
end
return true
else
return false, "listfiles function not available or folder not found"
end
end)
if not success then
print("Error loading config list:", result)
end
return success, Linux.SavedConfigs
end

function Linux.Destroy()
Linux.SaveResizeSettings()
globalConnectionManager:cleanup()
for _, notificationData in ipairs(Linux.ActiveNotifications) do
if notificationData.Holder and notificationData.Holder.Parent then
notificationData.Holder:Destroy()
end
end
if Linux.ToggleUI and Linux.ToggleUI.Parent then
Linux.ToggleUI:Destroy()
end
Linux.ActiveNotifications = {}
Linux.AccentElements = {}
Linux.CheckboxElements = {}
Linux.ToggleElements = {}
Linux.SliderElements = {}
Linux.SectionElements = {}
Linux.TabIconElements = {}
Linux.SavedElements = {}
Linux.TabSections = {}
end

function Linux.Create(config)
	if config.Owner and config.Owner.Blacklist then
		local blacklist = config.Owner.Blacklist
		local playerUserId = tostring(LocalPlayer.UserId)
		local playerName = LocalPlayer.Name
		for _, entry in ipairs(blacklist) do
			local entryStr = tostring(entry)
			if entryStr == playerUserId or entryStr == playerName then
				return nil
			end
		end
	end
	if config.Detector then
		Linux.DetectorList = {}
		for _, userId in ipairs(config.Detector) do
			table.insert(Linux.DetectorList, tonumber(userId))
		end
	end
if config.ConfigFolder then
Linux.ConfigFolder = config.ConfigFolder
end
if config.TabHighlight ~= nil then
Linux.TabHighlight = config.TabHighlight
end
if config.DropdownBar ~= nil then
Linux.DropdownBar = config.DropdownBar
end
if config.Line ~= nil then
Linux.LineEnabled = config.Line
end
if config.ShowSliderMax ~= nil then
Linux.ShowSliderMax = config.ShowSliderMax
end
if config.TabIconAccentColorEnabled ~= nil then
Linux.TabIconAccentColorEnabled = config.TabIconAccentColorEnabled
end
if config.Accent and Linux.Accents[config.Accent] then
Linux.CurrentAccent = config.Accent
Linux.SelectedAccent = config.Accent
end
if config.Background then
if config.Background.Image then
Linux.BackgroundSettings.Image = tostring(config.Background.Image)
end
if config.Background.Transparency ~= nil then
Linux.BackgroundSettings.Transparency = math.clamp(config.Background.Transparency, 0, 1)
end
end
local SettingsIcon = config.SettingsIcon or "rbxassetid://10734950309"
local SettingsIconEnabled = config.SettingsIconEnabled ~= false
	Linux.LoadAutoLoadSettings()
	Linux.LoadPrivacySettings()
	Linux.LoadAccentSettings()
	Linux.LoadResizeSettings()
	Linux.LoadAdminDetectorSettings()
local parent = RunService:IsStudio() and LocalPlayer:FindFirstChild("PlayerGui") or (gethui and gethui() or game:GetService("CoreGui"))
local ProtectGui = protectgui or (syn and syn.protect_gui) or function() end
local LinuxUI = Linux.Instance("ScreenGui", {
Name = "LinuxUI",
Parent = nil,
ResetOnSpawn = false,
Enabled = true,
ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
IgnoreGuiInset = true
})
pcall(function()
if sethiddenproperty then
sethiddenproperty(LinuxUI, "ScreenInsets", Enum.ScreenInsets.DeviceSafeInsets)
end
end)
task.defer(function()
ProtectGui(LinuxUI)
LinuxUI.Parent = parent
end)
Linux.ToggleUI = nil
local ToggleButton = nil
if config.ToggleEnabled ~= false then
Linux.ToggleUI = Linux.Instance("ScreenGui", {
Name = "LinuxUIToggle",
Parent = nil,
ResetOnSpawn = false,
Enabled = true,
ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	})
	task.defer(function()
		ProtectGui(Linux.ToggleUI)
		Linux.ToggleUI.Parent = parent
	end)
	ToggleButton = Linux.Instance("ImageButton", {
		Parent = Linux.ToggleUI,
BackgroundColor3 = Color3.fromRGB(18, 18, 18),
BackgroundTransparency = 0.1,
BorderSizePixel = 0,
Size = UDim2.new(0, 50, 0, 50),
Position = UDim2.new(0, 20, 0.5, -25),
Image = resolveIcon(config.Logo) or Linux.ToggleIconAssetId,
ImageColor3 = Color3.fromRGB(255, 255, 255),
ZIndex = 1000,
AutoButtonColor = false
})
Linux.Instance("UICorner", {
Parent = ToggleButton,
CornerRadius = UDim.new(0, 8)
})
local isDragging = false
local dragStart = nil
local startPos = nil
local hasMoved = false
local connection1 = globalConnectionManager:addConnection(ToggleButton.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
isDragging = true
dragStart = input.Position
startPos = ToggleButton.Position
hasMoved = false
end
end))
local updateConnection
updateConnection = globalConnectionManager:addUpdateLoop(RunService.Heartbeat:Connect(function()
if isDragging then
local mouse = Players.LocalPlayer:GetMouse()
local currentInput = Vector2.new(mouse.X, mouse.Y)
			local delta = currentInput - Vector2.new(dragStart.X, dragStart.Y)
			if math.abs(delta.X) > 2 or math.abs(delta.Y) > 2 then
				hasMoved = true
				local newX = math.clamp(startPos.X.Offset + delta.X, 0, Linux.ToggleUI.AbsoluteSize.X - 50)
				local newY = math.clamp(startPos.Y.Offset + delta.Y, 0, Linux.ToggleUI.AbsoluteSize.Y - 50)
				ToggleButton.Position = UDim2.new(0, newX, 0, newY)
			end
		end
	end))
local connection3 = globalConnectionManager:addConnection(ToggleButton.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
if isDragging then
isDragging = false
if not hasMoved then
LinuxUI.Enabled = not LinuxUI.Enabled
local tween1 = TweenService:Create(ToggleButton, TweenInfo.new(0.1), { Size = UDim2.new(0, 45, 0, 45) })
local tween2 = TweenService:Create(ToggleButton, TweenInfo.new(0.1), { Size = UDim2.new(0, 50, 0, 50) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
task.wait(0.001)
tween2:Play()
end
end
end
end))
local connection4 = globalConnectionManager:addConnection(InputService.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
if isDragging then
isDragging = false
end
end
end))
end
local isMobile = Linux.DeviceType == "Mobile"
local uiSize = isMobile and (config.SizeMobile or UDim2.fromOffset(620, 395)) or (config.SizePC or UDim2.fromOffset(620, 395))
local savedWidth = Linux.SavedResize.Width or uiSize.X.Offset
local savedHeight = Linux.SavedResize.Height or uiSize.Y.Offset
local loadedSize = UDim2.new(0, savedWidth, 0, savedHeight)
uiSize = loadedSize
local originalSize = loadedSize
local Shadow = Linux.Instance("ImageLabel", {
Parent = LinuxUI,
Image = "rbxassetid://8992230677",
ScaleType = "Slice",
SliceCenter = Rect.new(Vector2.new(99, 99), Vector2.new(99, 99)),
AnchorPoint = Vector2.new(0.5, 0.5),
Size = UDim2.new(0, uiSize.X.Offset + 120, 0, uiSize.Y.Offset + 116),
Position = UDim2.new(0.5, 0, 0.5, 0),
BackgroundTransparency = 1,
ImageColor3 = Color3.fromRGB(0, 0, 0),
ImageTransparency = 1,
ZIndex = 0
})
local Main = Linux.Instance("Frame", {
Parent = LinuxUI,
BackgroundColor3 = Linux.MainFrameColor,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BackgroundTransparency = 0.20,
BorderSizePixel = 0,
Size = UDim2.new(0, 0, 0, 0),
Position = UDim2.new(0.5, 0, 0.5, 0),
AnchorPoint = Vector2.new(0.5, 0.5),
Active = true,
Draggable = false,
ZIndex = 1
})
Linux.Instance("UICorner", {
Parent = Main,
CornerRadius = UDim.new(0, 12)
})
Linux.Instance("UIStroke", {
Parent = Main,
Color = Color3.fromRGB(20, 20, 21),
Thickness = 1
})
if Linux.BackgroundSettings.Image and Linux.BackgroundSettings.Image ~= "" then
Linux.BackgroundImage = Linux.Instance("ImageLabel", {
Parent = Main,
Image = Linux.BackgroundSettings.Image,
ImageTransparency = Linux.BackgroundSettings.Transparency,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
BackgroundTransparency = 1,
ZIndex = 1,
ScaleType = Enum.ScaleType.Crop,
ImageColor3 = Color3.fromRGB(255, 255, 255),
ClipsDescendants = false
})
Linux.Instance("UICorner", {
Parent = Linux.BackgroundImage,
CornerRadius = UDim.new(0, 12)
})
end
local isDraggingMain = false
local dragStartMain = nil
local startPosMain = nil
local startPosShadow = nil
local openingTween = TweenInfo.new(0.3, Enum.EasingStyle.Quad)
local mainSizeTween = TweenService:Create(Main, openingTween, {
Size = uiSize
})
globalConnectionManager:addTween(mainSizeTween)
mainSizeTween:Play()
globalConnectionManager:addConnection(mainSizeTween.Completed:Connect(function()
local shadowTween = TweenService:Create(Shadow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
ImageTransparency = 0.5
})
globalConnectionManager:addTween(shadowTween)
shadowTween:Play()
end))
local ResizeHandle = Linux.Instance("ImageButton", {
Parent = Main,
BackgroundTransparency = 1,
Size = UDim2.new(0, 45, 0, 45),
Position = UDim2.new(1, -20, 1, -20),
Image = "rbxassetid://10723346553",
ImageColor3 = Color3.fromRGB(120, 120, 130),
ImageTransparency = 1,
ZIndex = 100,
AutoButtonColor = false
})
local isResizing = false
local startSize = uiSize
local startPos = Vector2.new(0, 0)
local isMinimized = false
local resizeUpdateConnection
local connection5 = globalConnectionManager:addConnection(ResizeHandle.InputBegan:Connect(function(input)
if not isMinimized and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
isResizing = true
startSize = Main.Size
startPos = Vector2.new(input.Position.X, input.Position.Y)
local inputEndConnection
inputEndConnection = globalConnectionManager:addConnection(input.Changed:Connect(function()
if input.UserInputState == Enum.UserInputState.End then
isResizing = false
Linux.SaveResizeSettings()
if inputEndConnection and inputEndConnection.Connected then
inputEndConnection:Disconnect()
end
end
end))
end
end))
local connection6 = globalConnectionManager:addConnection(UserInputService.InputChanged:Connect(function(input)
if isResizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local currentPos = Vector2.new(input.Position.X, input.Position.Y)
local delta = currentPos - startPos
local newWidth = math.max(400, startSize.X.Offset + delta.X)
local newHeight = math.max(300, startSize.Y.Offset + delta.Y)
newWidth, newHeight = Linux.ValidateResizeSize(newWidth, newHeight)
Main.Size = UDim2.new(0, newWidth, 0, newHeight)
Shadow.Size = UDim2.new(0, newWidth + 120, 0, newHeight + 116)
if Linux.BackgroundImage then
Linux.BackgroundImage.Size = UDim2.new(1, 0, 1, 0)
end
Linux.SavedResize.Width = newWidth
Linux.SavedResize.Height = newHeight
end
end))
local function setupDragHandlers(frame)
local connection1 = globalConnectionManager:addConnection(frame.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
isDraggingMain = true
dragStartMain = input.Position
startPosMain = Main.Position
startPosShadow = Shadow.Position
end
end))
local connection2 = globalConnectionManager:addConnection(frame.InputChanged:Connect(function(input)
if isDraggingMain and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local delta = input.Position - dragStartMain
local mainNewX = startPosMain.X.Offset + delta.X
local mainNewY = startPosMain.Y.Offset + delta.Y
local shadowNewX = startPosShadow.X.Offset + delta.X
local shadowNewY = startPosShadow.Y.Offset + delta.Y
Main.Position = UDim2.new(startPosMain.X.Scale, mainNewX, startPosMain.Y.Scale, mainNewY)
Shadow.Position = UDim2.new(startPosShadow.X.Scale, shadowNewX, startPosShadow.Y.Scale, shadowNewY)
end
end))
local connection3 = globalConnectionManager:addConnection(frame.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
isDraggingMain = false
end
end))
return { connection1, connection2, connection3 }
end
local TopBar = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Linux.MainFrameColor,
BackgroundTransparency = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 30),
ZIndex = 2,
Active = true,
Draggable = false
})
Linux.Instance("UICorner", {
Parent = TopBar,
CornerRadius = UDim.new(0, 8)
})
setupDragHandlers(TopBar)
local connection12 = globalConnectionManager:addConnection(InputService.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
if isDraggingMain then
isDraggingMain = false
end
end
end))
local TopBarLine = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Color3.fromRGB(26, 26, 28),
BackgroundTransparency = 0,
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 1),
Position = UDim2.new(0, 0, 0, 30),
ZIndex = 2
})
local hasLogo = config.Logo and config.Logo ~= ""
local LogoImage = nil
local titleOffset = 12
if hasLogo then
LogoImage = Linux.Instance("ImageLabel", {
Parent = TopBar,
BackgroundTransparency = 1,
Size = UDim2.new(0, 22, 0, 22),
Position = UDim2.new(0, 10, 0.5, -11),
Image = resolveIcon(config.Logo),
ImageColor3 = Color3.fromRGB(255, 255, 255),
ZIndex = 2
})
titleOffset = 40
end
local TitleLabel = Linux.Instance("TextLabel", {
Parent = TopBar,
BackgroundTransparency = 1,
Size = UDim2.new(0, 0, 1, 0),
Position = UDim2.new(0, titleOffset, 0, 0),
Font = Enum.Font.GothamBold,
Text = config.Name or "Linux UI",
TextColor3 = Color3.fromRGB(230, 230, 240),
TextSize = 13,
TextXAlignment = Enum.TextXAlignment.Left,
AutomaticSize = Enum.AutomaticSize.X,
ZIndex = 2
})
TitleLabel.Text = config.Name or "Linux UI"
if config.TitleGradient and config.TitleGradient.Enabled then
local titleGradient = Linux.Instance("UIGradient", {
Parent = TitleLabel,
Color = config.TitleGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
},
Rotation = config.TitleGradient.Rotation or 0
})
end
local SubtitleLabel = nil
if config.Subtitle then
SubtitleLabel = Linux.Instance("TextLabel", {
Parent = TopBar,
BackgroundTransparency = 1,
Size = UDim2.new(0, 0, 1, 0),
Position = UDim2.new(0, TitleLabel.AbsoluteSize.X + titleOffset + 8, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Subtitle,
TextColor3 = Color3.fromRGB(140, 140, 150),
TextSize = 12,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Center,
AutomaticSize = Enum.AutomaticSize.X,
TextWrapped = false,
ZIndex = 2
})
SubtitleLabel.Text = config.Subtitle
	if config.SubtitleGradient and config.SubtitleGradient.Enabled then
		local subtitleGradient = Linux.Instance("UIGradient", {
			Parent = SubtitleLabel,
			Color = config.SubtitleGradient.Color or ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
			},
			Rotation = config.SubtitleGradient.Rotation or 0
		})
	end
	globalConnectionManager:addConnection(TitleLabel:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		SubtitleLabel.Position = UDim2.new(0, TitleLabel.AbsoluteSize.X + titleOffset + 8, 0, 0)
		if Linux.TopBarTagsContainer then
			Linux.TopBarTagsContainer.Position = UDim2.new(0, TitleLabel.AbsoluteSize.X + titleOffset + SubtitleLabel.AbsoluteSize.X + 16, 0.5, 0)
		end
	end))
	globalConnectionManager:addConnection(SubtitleLabel:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		if Linux.TopBarTagsContainer then
			Linux.TopBarTagsContainer.Position = UDim2.new(0, TitleLabel.AbsoluteSize.X + titleOffset + SubtitleLabel.AbsoluteSize.X + 16, 0.5, 0)
		end
	end))
	Linux.TopBarTagsContainer = Linux.Instance("Frame", {
		Parent = TopBar,
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 0, 0, 20),
		Position = UDim2.new(0, TitleLabel.AbsoluteSize.X + titleOffset + SubtitleLabel.AbsoluteSize.X + 16, 0.5, 0),
		AnchorPoint = Vector2.new(0, 0.5),
		AutomaticSize = Enum.AutomaticSize.X,
		ZIndex = 2
	})
	Linux.Instance("UIListLayout", {
		Parent = Linux.TopBarTagsContainer,
		FillDirection = Enum.FillDirection.Horizontal,
		HorizontalAlignment = Enum.HorizontalAlignment.Left,
		VerticalAlignment = Enum.VerticalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(0, 4)
	})
end
local MinimizeButton = Linux.Instance("ImageButton", {
Parent = TopBar,
BackgroundTransparency = 1,
Size = UDim2.new(0, 16, 0, 16),
Position = UDim2.new(1, -46, 0.5, -8),
Image = "rbxassetid://10734896206",
ImageColor3 = Color3.fromRGB(180, 180, 190),
ZIndex = 3
})
local CloseButton = Linux.Instance("ImageButton", {
Parent = TopBar,
BackgroundTransparency = 1,
Size = UDim2.new(0, 16, 0, 16),
Position = UDim2.new(1, -26, 0.5, -8),
Image = "rbxassetid://10747384394",
ImageColor3 = Color3.fromRGB(180, 180, 190),
ZIndex = 3
})
local TabsBar = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Linux.MainFrameColor,
BackgroundTransparency = 1,
Position = UDim2.new(0, 0, 0, 30),
Size = UDim2.new(0, config.TabWidth or 130, 1, -30),
ZIndex = 2,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Active = true
})
setupDragHandlers(TabsBar)
local TabsVerticalLine = nil
if Linux.LineEnabled then
TabsVerticalLine = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Color3.fromRGB(26, 26, 28),
BackgroundTransparency = 0,
BorderSizePixel = 0,
Size = UDim2.new(0, 1, 1, -30),
Position = UDim2.new(0, config.TabWidth or 130, 0, 30),
ZIndex = 2
})
end
local ProfileFrame = Linux.Instance("Frame", {
Parent = TabsBar,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 0, 65),
Position = UDim2.new(0, 0, 1, -65),
ZIndex = 3
})
local ProfileHorizontalLine = nil
if Linux.LineEnabled then
ProfileHorizontalLine = Linux.Instance("Frame", {
Parent = ProfileFrame,
BackgroundColor3 = Color3.fromRGB(26, 26, 28),
BackgroundTransparency = 0,
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 1),
Position = UDim2.new(0, 0, 0, 0),
ZIndex = 3
})
end
local ProfileImage = Linux.Instance("ImageLabel", {
Parent = ProfileFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 32, 0, 32),
Position = UDim2.new(0, 10, 0, 10),
Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48),
ZIndex = 3
})
Linux.Instance("UICorner", {
Parent = ProfileImage,
CornerRadius = UDim.new(1, 0)
})
local PlayerDisplayName = Linux.Instance("TextLabel", {
Parent = ProfileFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -52, 0, 16),
Position = UDim2.new(0, 50, 0, 10),
Font = Enum.Font.GothamSemibold,
Text = Linux.PrivacyEnabled and "Anonymous" or LocalPlayer.DisplayName,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
TextTruncate = Enum.TextTruncate.AtEnd,
ZIndex = 3
})
local PlayerRealName = Linux.Instance("TextLabel", {
Parent = ProfileFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -52, 0, 14),
Position = UDim2.new(0, 50, 0, 26),
Font = Enum.Font.GothamSemibold,
Text = Linux.PrivacyEnabled and "@Anonymous" or ("@" .. LocalPlayer.Name),
TextColor3 = Color3.fromRGB(150, 150, 160),
TextSize = 12,
TextXAlignment = Enum.TextXAlignment.Left,
TextTruncate = Enum.TextTruncate.AtEnd,
ZIndex = 3
})
local function UpdatePrivacyDisplay()
if Linux.PrivacyEnabled then
PlayerDisplayName.Text = "Anonymous"
PlayerRealName.Text = "@Anonymous"
else
PlayerDisplayName.Text = LocalPlayer.DisplayName
PlayerRealName.Text = "@" .. LocalPlayer.Name
end
end
local TabHolder = Linux.Instance("ScrollingFrame", {
Parent = TabsBar,
BackgroundTransparency = 1,
Position = UDim2.new(0, 0, 0, 8),
Size = UDim2.new(1, 0, 1, -73),
CanvasSize = UDim2.new(0, 0, 0, 0),
AutomaticCanvasSize = Enum.AutomaticSize.Y,
ScrollBarThickness = 0,
ZIndex = 2,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
ScrollingEnabled = true
})
Linux.Instance("UIListLayout", {
Parent = TabHolder,
Padding = UDim.new(0, 2),
HorizontalAlignment = Enum.HorizontalAlignment.Left,
VerticalAlignment = Enum.VerticalAlignment.Top,
SortOrder = Enum.SortOrder.LayoutOrder
})
Linux.Instance("UIPadding", {
Parent = TabHolder,
PaddingLeft = UDim.new(0, 8),
PaddingRight = UDim.new(0, 8),
PaddingTop = UDim.new(0, 8)
})
local Content = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Linux.MainFrameColor,
BackgroundTransparency = 1,
Position = UDim2.new(0, config.TabWidth or 130, 0, 30),
Size = UDim2.new(1, -(config.TabWidth or 130), 1, -30),
ZIndex = 1,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
local minimizedSize = UDim2.new(0, uiSize.X.Offset, 0, 30)
globalConnectionManager:addConnection(MinimizeButton.MouseEnter:Connect(function()
local tween = TweenService:Create(MinimizeButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(MinimizeButton.MouseLeave:Connect(function()
local tween = TweenService:Create(MinimizeButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(180, 180, 190) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(MinimizeButton.MouseButton1Click:Connect(function()
isMinimized = not isMinimized
if isMinimized then
local tween1 = TweenService:Create(Main, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = minimizedSize })
local tween2 = TweenService:Create(Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { ImageTransparency = 1 })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
Content.Visible = false
TabsBar.Visible = false
TopBarLine.Visible = false
if TabsVerticalLine then
TabsVerticalLine.Visible = false
end
MinimizeButton.Image = "rbxassetid://10734886496"
ResizeHandle.ImageTransparency = 1
ResizeHandle.Active = false
else
local tween1 = TweenService:Create(Main, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = originalSize })
local tween2 = TweenService:Create(Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
ImageTransparency = 0.5,
Size = UDim2.new(0, originalSize.X.Offset + 120, 0, originalSize.Y.Offset + 116)
})
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
Content.Visible = true
TabsBar.Visible = true
TopBarLine.Visible = true
if TabsVerticalLine then
TabsVerticalLine.Visible = true
end
MinimizeButton.Image = "rbxassetid://10734896206"
ResizeHandle.ImageTransparency = 1
ResizeHandle.Active = true
end
end))
globalConnectionManager:addConnection(CloseButton.MouseEnter:Connect(function()
local tween = TweenService:Create(CloseButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(CloseButton.MouseLeave:Connect(function()
local tween = TweenService:Create(CloseButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(180, 180, 190) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(CloseButton.MouseButton1Click:Connect(function()
Linux.Destroy()
LinuxUI:Destroy()
end))
globalConnectionManager:addConnection(InputService.InputBegan:Connect(function(input)
if input.KeyCode == Enum.KeyCode.LeftAlt then
LinuxUI.Enabled = not LinuxUI.Enabled
end
end))
	local LinuxLib = {}
	local Tabs = {}
	local AllElements = {}
	local CurrentTab = nil
	local tabOrder = 0
	local DefaultTab = nil
	local TabScrollPositions = {}
local function AnimateTabSliders(tabIndex)
spawn(function()
if Tabs[tabIndex] and Tabs[tabIndex].Elements then
for _, elementData in pairs(Tabs[tabIndex].Elements) do
if elementData.Type == "Slider" then
local slider = elementData.Instance
local fillBar = slider:FindFirstChild("Bar") and slider.Bar:FindFirstChild("Fill")
local knob = slider:FindFirstChild("Bar") and slider.Bar:FindFirstChild("Knob")
if fillBar and knob then
local currentValue = slider:GetAttribute("Value")
local min = slider:GetAttribute("Min")
local max = slider:GetAttribute("Max")
local targetPos = (currentValue - min) / (max - min)
fillBar.Size = UDim2.new(0, 0, 1, 0)
knob.Position = UDim2.new(0, 0, 0.5, 0)
local tween = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween1 = TweenService:Create(fillBar, tween, { Size = UDim2.new(targetPos, 0, 1, 0) })
local tween2 = TweenService:Create(knob, tween, { Position = UDim2.new(targetPos, 0, 0.5, 0) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end
end
end
end
end)
end
local function AnimateTabTransition(newTabContent)
spawn(function()
local containerWrapper = newTabContent:FindFirstChild("Frame")
if containerWrapper then
containerWrapper.Position = UDim2.new(0, 12, 0, 25)
local slideDownTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(containerWrapper, slideDownTween, {
Position = UDim2.new(0, 12, 0, 55)
})
globalConnectionManager:addTween(tween)
tween:Play()
end
end)
end
local function CheckEmptyState()
for tabIndex, tab in pairs(Tabs) do
if tab and tab.EmptyStateFrame then
local hasVisibleElements = false
for _, elementData in pairs(tab.Elements) do
if elementData.Instance.Parent == tab.Container and elementData.Instance.Visible and elementData.Type ~= "Section" then
hasVisibleElements = true
break
end
end
if hasVisibleElements then
tab.EmptyStateFrame.Visible = false
tab.ContainerWrapper.Visible = true
else
tab.EmptyStateFrame.Visible = true
tab.ContainerWrapper.Visible = true
end
end
end
end
function LinuxLib.Tab(config)
tabOrder = tabOrder + 1
local tabIndex = tabOrder
local SectionText = config.SectionText
if SectionText and SectionText ~= "" then
local SectionFrame = Linux.Instance("Frame", {
Parent = TabHolder,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 0, 20),
ZIndex = 2,
LayoutOrder = tabOrder - 1
})
local SectionLabel = Linux.Instance("TextLabel", {
Parent = SectionFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -5, 1, 0),
Position = UDim2.new(0, 5, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = SectionText,
TextColor3 = Color3.fromRGB(120, 120, 130),
TextSize = 11,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Center,
ZIndex = 3
})
SectionLabel.Text = SectionText
end
local TabBtn = Linux.Instance("TextButton", {
Parent = TabHolder,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 32),
Font = Enum.Font.GothamSemibold,
Text = "",
TextColor3 = Color3.fromRGB(210, 210, 210),
TextSize = 14,
ZIndex = 2,
AutoButtonColor = false,
LayoutOrder = tabIndex
})
Linux.Instance("UICorner", {
Parent = TabBtn,
CornerRadius = UDim.new(0, 6)
})
Linux.Instance("UIStroke", {
Parent = TabBtn,
Color = Color3.fromRGB(30, 30, 30),
Thickness = 1
})
local TabAccentBar = Linux.Instance("Frame", {
Parent = TabBtn,
BackgroundColor3 = Linux.Accents[Linux.CurrentAccent],
BackgroundTransparency = 0,
BorderSizePixel = 0,
Size = UDim2.new(0, 0, 0, 24),
Position = UDim2.new(0, 0, 0.5, -12),
ZIndex = 3,
Visible = Linux.TabHighlight
})
Linux.Instance("UICorner", {
Parent = TabAccentBar,
CornerRadius = UDim.new(0, 4)
})
if Linux.TabHighlight then
Linux.RegisterAccentElement(TabAccentBar)
end
local TabIcon
if config.Icon and config.Enabled then
local resolvedIcon = resolveIcon(config.Icon)
if resolvedIcon then
TabIcon = Linux.Instance("ImageLabel", {
Parent = TabBtn,
BackgroundTransparency = 1,
Size = UDim2.new(0, 18, 0, 18),
Position = UDim2.new(0, 10, 0.5, -9),
Image = resolvedIcon,
ImageColor3 = Color3.fromRGB(210, 210, 210),
ZIndex = 2
})
if config.IconGradient and config.IconGradient.Enabled then
local iconGradient = Linux.Instance("UIGradient", {
Parent = TabIcon,
Color = config.IconGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
},
Rotation = config.IconGradient.Rotation or 0
})
elseif Linux.TabIconAccentColorEnabled then
local accentColor = Linux.Accents[Linux.CurrentAccent]
local targetColor = accentColor
if Linux.CurrentAccent == "Black & White" then
targetColor = Color3.fromRGB(210, 210, 210)
end
TabIcon.ImageColor3 = targetColor
Linux.RegisterTabIconElement(TabIcon)
end
end
end
local textOffset = TabIcon and 33 or 16
	local TabText = Linux.Instance("TextLabel", {
		Parent = TabBtn,
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -(textOffset + 20), 1, 0),
		Position = UDim2.new(0, textOffset, 0, 0),
		Font = Enum.Font.GothamSemibold,
		Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name,
		TextColor3 = Color3.fromRGB(130, 130, 140),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
TabText.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(TabText, config.TranslationKey, "Text", nil, nil, nil)
end
local TabContent = Linux.Instance("Frame", {
Parent = Content,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Visible = false,
ZIndex = 1,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
local TitleFrame = Linux.Instance("Frame", {
Parent = Content,
BackgroundColor3 = Linux.MainFrameColor,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 0, 50),
Position = UDim2.new(0, 0, 0, 0),
Visible = false,
ZIndex = 3,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
local TitleLabel = Linux.Instance("TextLabel", {
Parent = TitleFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 1, 0),
Position = UDim2.new(0, 10, 0, 10),
Font = Enum.Font.GothamBold,
Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name,
TextColor3 = Color3.fromRGB(230, 230, 240),
TextSize = 24,
TextXAlignment = Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Center,
ZIndex = 4
})
TitleLabel.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(TitleLabel, config.TranslationKey, "Text", nil, nil, nil)
end
local ContainerWrapper = Linux.Instance("Frame", {
Parent = TabContent,
BackgroundTransparency = 1,
Size = UDim2.new(1, -16, 1, -70),
Position = UDim2.new(0, 12, 0, 55),
ZIndex = 1,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42)
})
local Container = Linux.Instance("ScrollingFrame", {
Parent = ContainerWrapper,
BackgroundColor3 = Linux.MainFrameColor,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
CanvasSize = UDim2.new(0, 0, 0, 0),
AutomaticCanvasSize = Enum.AutomaticSize.Y,
ScrollBarThickness = 0,
ZIndex = 1,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42),
ScrollingEnabled = true,
CanvasPosition = Vector2.new(0, 0)
})
local ContainerListLayout = Linux.Instance("UIListLayout", {
Parent = Container,
Padding = UDim.new(0, 3),
HorizontalAlignment = Enum.HorizontalAlignment.Left,
VerticalAlignment = Enum.VerticalAlignment.Top,
SortOrder = Enum.SortOrder.LayoutOrder
})
Linux.Instance("UIPadding", {
Parent = Container,
PaddingLeft = UDim.new(0, 2),
PaddingTop = UDim.new(0, 2)
})
local EmptyStateFrame = Linux.Instance("Frame", {
Parent = TabContent,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
Visible = false,
ZIndex = 5
})
local EmptyIcon = Linux.Instance("ImageLabel", {
Parent = EmptyStateFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 80, 0, 80),
Position = UDim2.new(0.5, -40, 0.5, -60),
Image = "rbxassetid://10723394681",
ImageColor3 = Color3.fromRGB(120, 120, 130),
ZIndex = 5
})
	local EmptyText = Linux.Instance("TextLabel", {
		Parent = EmptyStateFrame,
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -40, 0, 30),
		Position = UDim2.new(0, 20, 0.5, 30),
		Font = Enum.Font.GothamSemibold,
		Text = "Looks like there's nothing here",
		TextColor3 = Color3.fromRGB(120, 120, 130),
		TextSize = 16,
		TextXAlignment = Enum.TextXAlignment.Center,
		ZIndex = 5
	})
	EmptyText.Text = "Looks like there's nothing here"
	
	local scrollConnection = nil
	local function SaveScrollPosition(tabIdx, container)
		if tabIdx and container then
			TabScrollPositions[tabIdx] = container.CanvasPosition
		end
	end
	
	local function SelectTab()
		if CurrentTab == tabIndex then
			return
		end
		local tweenInfoShrink = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tweenInfoExpand = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		if CurrentTab and Tabs[CurrentTab] then
			local oldTab = Tabs[CurrentTab]
			SaveScrollPosition(CurrentTab, oldTab.Container)
			if scrollConnection then
				scrollConnection:Disconnect()
				scrollConnection = nil
			end
		oldTab.Content.Visible = false
		oldTab.TitleFrame.Visible = false
		oldTab.ContainerWrapper.Visible = false
		local textColorTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(oldTab.Text, textColorTween, { TextColor3 = Color3.fromRGB(130, 130, 140) })
		globalConnectionManager:addTween(tween)
		tween:Play()
		oldTab.Button.BackgroundColor3 = Linux.FrameColor
			oldTab.Button.BackgroundTransparency = 1
			oldTab.Button.BorderSizePixel = 0
			oldTab.Button.BorderColor3 = Color3.fromRGB(39, 39, 42)
			local oldStroke = oldTab.Button:FindFirstChild("UIStroke")
			if oldStroke then
				local tween = TweenService:Create(oldStroke, tweenInfoShrink, { Thickness = 0 })
				globalConnectionManager:addTween(tween)
				tween:Play()
				local strokeGradient = oldStroke:FindFirstChild("UIGradient")
				if strokeGradient then
					strokeGradient.Transparency = NumberSequence.new(1)
				end
			end
			if oldTab.Icon and not Linux.TabIconAccentColorEnabled then
				local tween = TweenService:Create(oldTab.Icon, tweenInfoShrink, { ImageColor3 = Color3.fromRGB(210, 210, 210) })
				globalConnectionManager:addTween(tween)
				tween:Play()
			end
			if Linux.TabHighlight and oldTab.TabAccentBar then
				local tween = TweenService:Create(oldTab.TabAccentBar, tweenInfoShrink, { Size = UDim2.new(0, 0, 0, 24) })
				globalConnectionManager:addTween(tween)
				tween:Play()
			end
		end
		TabContent.Visible = true
		TitleFrame.Visible = true
		ContainerWrapper.Position = UDim2.new(0, 12, 0, 25)
		ContainerWrapper.Visible = true
		local slideDownTween = TweenInfo.new(0.12, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(ContainerWrapper, slideDownTween, {
			Position = UDim2.new(0, 12, 0, 55)
		})
	globalConnectionManager:addTween(tween)
	tween:Play()
	local textColorTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local textTween = TweenService:Create(TabText, textColorTween, { TextColor3 = Color3.fromRGB(210, 210, 210) })
	globalConnectionManager:addTween(textTween)
	textTween:Play()
	TabBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		TabBtn.BackgroundTransparency = 0.78
		TabBtn.BorderSizePixel = 1
		TabBtn.BorderColor3 = Color3.new(1, 1, 1)
		local tabStroke = TabBtn:FindFirstChild("UIStroke")
		if tabStroke then
			tabStroke.Color = Color3.new(1, 1, 1)
			tabStroke.Transparency = 0.1
			local tween = TweenService:Create(tabStroke, tweenInfoExpand, { Thickness = 1 })
			globalConnectionManager:addTween(tween)
			tween:Play()
			local strokeGradient = tabStroke:FindFirstChild("UIGradient")
			if not strokeGradient then
				strokeGradient = Linux.Instance("UIGradient", {
					Parent = tabStroke,
					Transparency = NumberSequence.new{
						NumberSequenceKeypoint.new(0, 0.1),
						NumberSequenceKeypoint.new(0.5, 1),
						NumberSequenceKeypoint.new(1, 0.1)
					},
					Rotation = 70
				})
			else
				strokeGradient.Transparency = NumberSequence.new{
					NumberSequenceKeypoint.new(0, 0.1),
					NumberSequenceKeypoint.new(0.5, 1),
					NumberSequenceKeypoint.new(1, 0.1)
				}
				strokeGradient.Rotation = 70
			end
		end
		if TabIcon and not Linux.TabIconAccentColorEnabled then
			local tween = TweenService:Create(TabIcon, tweenInfoExpand, { ImageColor3 = Color3.fromRGB(210, 210, 210) })
			globalConnectionManager:addTween(tween)
			tween:Play()
		end
		if Linux.TabHighlight then
			local tween2 = TweenService:Create(TabAccentBar, tweenInfoExpand, { Size = UDim2.new(0, 4, 0, 24) })
			globalConnectionManager:addTween(tween2)
			tween2:Play()
		end
		CurrentTab = tabIndex
		Linux.CurrentTab = tabIndex
		
		if TabScrollPositions[tabIndex] then
			Container.CanvasPosition = TabScrollPositions[tabIndex]
		else
			Container.CanvasPosition = Vector2.new(0, 0)
			TabScrollPositions[tabIndex] = Vector2.new(0, 0)
		end
		
		scrollConnection = globalConnectionManager:addConnection(Container:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
			SaveScrollPosition(tabIndex, Container)
		end))
		
		AnimateTabSliders(tabIndex)
		CheckEmptyState()
	end
globalConnectionManager:addConnection(TabBtn.MouseButton1Click:Connect(SelectTab))
Tabs[tabIndex] = {
Name = config.Name,
Button = TabBtn,
Text = TabText,
Icon = TabIcon,
Content = TabContent,
TitleFrame = TitleFrame,
Elements = {},
EmptyStateFrame = EmptyStateFrame,
ContainerWrapper = ContainerWrapper,
Container = Container,
ContainerListLayout = ContainerListLayout,
ElementOrder = 0,
LastWasDropdown = false,
TabAccentBar = TabAccentBar,
SectionData = SectionText and {
tabIndex = tabIndex,
sectionText = SectionText
} or nil
}
if config.Default == true then
DefaultTab = tabIndex
task.spawn(function()
task.wait(0.0001)
SelectTab()
end)
elseif CurrentTab == nil and tabOrder == 1 then
DefaultTab = tabIndex
task.spawn(function()
task.wait(0.0001)
SelectTab()
end)
end
local TabElements = {}
local function getTargetContainer()
return Tabs[tabIndex].Container, Tabs[tabIndex].ContainerListLayout
end
local function updateElementOrder(isDropdown)
Tabs[tabIndex].ElementOrder = Tabs[tabIndex].ElementOrder + 1
if Tabs[tabIndex].LastWasDropdown then
Tabs[tabIndex].ContainerListLayout.Padding = UDim.new(0, 7)
else
Tabs[tabIndex].ContainerListLayout.Padding = UDim.new(0, 3)
end
Tabs[tabIndex].LastWasDropdown = isDropdown
globalConnectionManager:incrementElementCount()
return Tabs[tabIndex].ElementOrder
end
function TabElements.Button(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local CollapseEnable = config.CollapseEnable or false
local CollapseCount = config.CollapseCount or 1
local IsCollapsed = true
local Icon = config.Icon or ""
local BtnFrame = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
	Linux.Instance("UICorner", {
		Parent = BtnFrame,
		CornerRadius = UDim.new(0, 6)
	})
	local Btn = Linux.Instance("TextButton", {
Parent = BtnFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2,
AutoButtonColor = false
})
Btn.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(Btn, config.TranslationKey, "Text", nil, nil, nil)
end
local DescLabel = nil
if hasDescription then
Btn.Position = UDim2.new(0, 0, 0, -8)
DescLabel = Linux.Instance("TextLabel", {
Parent = BtnFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.DescriptionTranslationKey and Linux.Translate(config.DescriptionTranslationKey) or config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
if config.DescriptionTranslationKey then
Linux.RegisterTranslatableElement(DescLabel, config.DescriptionTranslationKey, "Text", nil, nil, nil)
end
end
Linux.Instance("UIPadding", {
Parent = Btn,
PaddingLeft = UDim.new(0, 10)
})
local IconImage = nil
if Icon ~= "" then
local iconAsset = Icon
if LucideIcons[Icon] then
iconAsset = LucideIcons[Icon]
end
IconImage = Linux.Instance("ImageLabel", {
Parent = BtnFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 16, 0, 16),
Position = UDim2.new(1, -26, 0.5, -8),
Image = iconAsset,
ImageColor3 = Color3.fromRGB(210, 210, 210),
ZIndex = 2
})
end
local CollapseArrow = nil
local CollapseGradientLine = nil
local targetElements = {}
local collapseCooldown = false
local collapseCooldownTime = 0.35
if CollapseEnable then
local arrowOffset = (Icon ~= "" and IconImage) and -46 or -26
		CollapseArrow = Linux.Instance("ImageLabel", {
			Parent = BtnFrame,
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 16, 0, 16),
			Position = UDim2.new(1, arrowOffset, 0.5, -8),
			Image = "rbxassetid://10709791437",
			ImageColor3 = Color3.fromRGB(210, 210, 210),
			Rotation = 0,
			ZIndex = 1
		})
CollapseGradientLine = Linux.Instance("Frame", {
Parent = BtnFrame,
BackgroundColor3 = Linux.Accents[Linux.CurrentAccent],
Size = UDim2.new(0, 0, 0, 2),
Position = UDim2.new(0, 5, 1, 0),
ZIndex = 2,
Visible = false
})
local CollapseGradient = Linux.Instance("UIGradient", {
Parent = CollapseGradientLine,
Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0.8),
NumberSequenceKeypoint.new(0.5, 0),
NumberSequenceKeypoint.new(1, 0.8)
})
})
Linux.RegisterAccentElement(CollapseGradientLine)
Btn.Size = UDim2.new(1, -30, 1, 0)
task.defer(function()
task.wait(0.1)
local currentTab = Tabs[tabIndex]
local buttonFound = false
local elementsToHide = 0
for _, elementData in pairs(currentTab.Elements) do
if elementData.Instance == BtnFrame then
buttonFound = true
continue
end
if buttonFound and elementsToHide < CollapseCount then
table.insert(targetElements, elementData.Instance)
elementsToHide = elementsToHide + 1
end
end
for i, element in pairs(targetElements) do
if element and element.Parent then
element.Visible = false
end
end
end)
end
	local originalTextColor = Color3.fromRGB(200, 200, 210)
	local hoverDuration = 0.2
	globalConnectionManager:addConnection(Btn.MouseEnter:Connect(function()
		local tween = TweenService:Create(BtnFrame, TweenInfo.new(0.2), { BackgroundTransparency = 0.3 })
		globalConnectionManager:addTween(tween)
		tween:Play()
	end))
	globalConnectionManager:addConnection(Btn.MouseLeave:Connect(function()
		local tween = TweenService:Create(BtnFrame, TweenInfo.new(0.2), { BackgroundTransparency = Linux.FrameTransparency })
		globalConnectionManager:addTween(tween)
		tween:Play()
	end))
	globalConnectionManager:addConnection(Btn.MouseButton1Down:Connect(function()
local tween1 = TweenService:Create(BtnFrame, TweenInfo.new(0.1), { BackgroundTransparency = 0.1 })
local tween2 = TweenService:Create(Btn, TweenInfo.new(0.1), { TextColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end))
globalConnectionManager:addConnection(Btn.MouseButton1Up:Connect(function()
local tween1 = TweenService:Create(BtnFrame, TweenInfo.new(0.1), { BackgroundTransparency = 0.3 })
globalConnectionManager:addTween(tween1)
tween1:Play()
task.spawn(function()
task.wait(hoverDuration)
local tween2 = TweenService:Create(Btn, TweenInfo.new(0.1), { TextColor3 = originalTextColor })
globalConnectionManager:addTween(tween2)
tween2:Play()
end)
end))
local function toggleCollapseElements()
if not CollapseEnable or collapseCooldown then return end
collapseCooldown = true
IsCollapsed = not IsCollapsed
local tween = TweenService:Create(CollapseArrow, TweenInfo.new(0.32, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = IsCollapsed and 0 or 83 })
globalConnectionManager:addTween(tween)
tween:Play()
if CollapseGradientLine then
if not IsCollapsed then
CollapseGradientLine.Visible = true
CollapseGradientLine.Size = UDim2.new(0, 0, 0, 2)
local gradientTween = TweenService:Create(CollapseGradientLine, TweenInfo.new(0.32, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(1, -10, 0, 2) })
globalConnectionManager:addTween(gradientTween)
gradientTween:Play()
else
local gradientTween = TweenService:Create(CollapseGradientLine, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 0, 0, 2) })
globalConnectionManager:addTween(gradientTween)
gradientTween:Play()
gradientTween.Completed:Connect(function()
CollapseGradientLine.Visible = false
end)
end
end
			local function IsInsideDropFrame(child)
				local parent = child.Parent
				while parent do
					if parent.Name == "DropFrame" then
						return true
					end
					parent = parent.Parent
				end
				return false
			end
			for i, element in pairs(targetElements) do
				if element and element.Parent then
					local dropdownButton = element:FindFirstChild("DropdownButton")
					if dropdownButton then
						local arrow = dropdownButton:FindFirstChild("Arrow")
						if arrow and arrow.Rotation > 0 then
							local nextElement = targetElements[i + 1]
							if nextElement and nextElement.Name == "DropFrame" and nextElement.Visible then
								nextElement.Visible = false
								nextElement.Size = UDim2.new(1, 0, 0, 0)
								arrow.Rotation = 0
							end
						end
					end
					if element.Name == "DropFrame" then
						element.Visible = false
						element.Size = UDim2.new(1, 0, 0, 0)
					elseif IsCollapsed then
						local closeTween = TweenService:Create(element, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { Position = UDim2.new(0, 0, 0, -15), Size = UDim2.new(element.Size.X.Scale, element.Size.X.Offset, element.Size.Y.Scale * 0.9, element.Size.Y.Offset * 0.9) })
						globalConnectionManager:addTween(closeTween)
						closeTween:Play()
				for _, child in pairs(element:GetDescendants()) do
					if child:IsA("GuiObject") and not IsInsideDropFrame(child) then
						local closeTweenBG = TweenService:Create(child, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { BackgroundTransparency = 1 })
						globalConnectionManager:addTween(closeTweenBG)
						closeTweenBG:Play()
						if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
							local closeTweenText = TweenService:Create(child, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { TextTransparency = 1 })
							globalConnectionManager:addTween(closeTweenText)
							closeTweenText:Play()
						end
						if child:IsA("ImageLabel") or child:IsA("ImageButton") then
							local closeTweenImg = TweenService:Create(child, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { ImageTransparency = 1 })
							globalConnectionManager:addTween(closeTweenImg)
							closeTweenImg:Play()
						end
					end
					if child:IsA("UIStroke") and not IsInsideDropFrame(child) then
						child:SetAttribute("OrigStroke", child.Transparency)
						local closeTweenStroke = TweenService:Create(child, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), { Transparency = 1 })
						globalConnectionManager:addTween(closeTweenStroke)
						closeTweenStroke:Play()
					end
				end
closeTween.Completed:Connect(function()
element.Visible = false
element.Size = UDim2.new(element.Size.X.Scale, element.Size.X.Offset, element.Size.Y.Scale / 0.9, element.Size.Y.Offset / 0.9)
element.Position = UDim2.new(0, 0, 0, 0)
				for _, child in pairs(element:GetDescendants()) do
					if child:IsA("GuiObject") and not IsInsideDropFrame(child) then
							if child:GetAttribute("OrigBG") ~= nil then child.BackgroundTransparency = child:GetAttribute("OrigBG") end
							if (child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox")) and child:GetAttribute("OrigText") ~= nil then child.TextTransparency = child:GetAttribute("OrigText") end
							if (child:IsA("ImageLabel") or child:IsA("ImageButton")) and child:GetAttribute("OrigImg") ~= nil then child.ImageTransparency = child:GetAttribute("OrigImg") end
						end
						if child:IsA("UIStroke") and child:GetAttribute("OrigStroke") ~= nil and not IsInsideDropFrame(child) then
							child.Transparency = child:GetAttribute("OrigStroke")
						end
					end
end)
else
					for _, child in pairs(element:GetDescendants()) do
						if child:IsA("GuiObject") and not IsInsideDropFrame(child) then
						child:SetAttribute("OrigBG", child.BackgroundTransparency)
						child.BackgroundTransparency = 1
						if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
							child:SetAttribute("OrigText", child.TextTransparency)
							child.TextTransparency = 1
						end
						if child:IsA("ImageLabel") or child:IsA("ImageButton") then
							child:SetAttribute("OrigImg", child.ImageTransparency)
							child.ImageTransparency = 1
						end
					end
					if child:IsA("UIStroke") and not IsInsideDropFrame(child) then
						child:SetAttribute("OrigStroke", child.Transparency)
						child.Transparency = 1
					end
				end
element.Visible = true
element.Position = UDim2.new(0, 0, 0, -15)
element.Size = UDim2.new(element.Size.X.Scale, element.Size.X.Offset, element.Size.Y.Scale * 0.9, element.Size.Y.Offset * 0.9)
local openTween = TweenService:Create(element, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(element.Size.X.Scale, element.Size.X.Offset, element.Size.Y.Scale / 0.9, element.Size.Y.Offset / 0.9) })
globalConnectionManager:addTween(openTween)
openTween:Play()
				for _, child in pairs(element:GetDescendants()) do
					if child:IsA("GuiObject") then
						local targetBG = child:GetAttribute("OrigBG") or 0
						local openTweenBG = TweenService:Create(child, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = targetBG })
						globalConnectionManager:addTween(openTweenBG)
						openTweenBG:Play()
						if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
							local targetText = child:GetAttribute("OrigText") or 0
							local openTweenText = TweenService:Create(child, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = targetText })
							globalConnectionManager:addTween(openTweenText)
							openTweenText:Play()
						end
						if child:IsA("ImageLabel") or child:IsA("ImageButton") then
							local targetImg = child:GetAttribute("OrigImg") or 0
							local openTweenImg = TweenService:Create(child, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { ImageTransparency = targetImg })
							globalConnectionManager:addTween(openTweenImg)
							openTweenImg:Play()
						end
					end
					if child:IsA("UIStroke") then
						local targetStroke = child:GetAttribute("OrigStroke") or 0
						local openTweenStroke = TweenService:Create(child, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Transparency = targetStroke })
						globalConnectionManager:addTween(openTweenStroke)
						openTweenStroke:Play()
					end
				end
end
end
end
task.delay(collapseCooldownTime, function()
collapseCooldown = false
end)
end
local function createConfirmationDialog(confirmationConfig)
local ConfirmationOverlay = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Color3.fromRGB(0, 0, 0),
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
ZIndex = 1000,
Active = true
})
Linux.Instance("UICorner", {
Parent = ConfirmationOverlay,
CornerRadius = UDim.new(0, 8)
})
local overlayTween = TweenService:Create(ConfirmationOverlay, TweenInfo.new(0.2), { BackgroundTransparency = 0.5 })
globalConnectionManager:addTween(overlayTween)
overlayTween:Play()
for _, element in pairs(Main:GetDescendants()) do
if element:IsA("TextButton") or element:IsA("TextBox") or element:IsA("ImageButton") then
if element ~= ConfirmationOverlay and not element:IsDescendantOf(ConfirmationOverlay) then
element.Active = false
end
end
end
local DialogFrame = Linux.Instance("Frame", {
Parent = ConfirmationOverlay,
BackgroundColor3 = Color3.fromRGB(13, 13, 13),
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 1,
BackgroundTransparency = 1,
Size = UDim2.new(0, 320, 0, 180),
Position = UDim2.new(0.5, -160, 0.5, -90),
ZIndex = 1001
})
Linux.Instance("UICorner", {
Parent = DialogFrame,
CornerRadius = UDim.new(0, 16)
})
Linux.Instance("UIScale", {
Parent = DialogFrame,
Scale = 0.9
})
local dialogTweenTransparency = TweenService:Create(DialogFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
BackgroundTransparency = 0
})
local dialogTweenScale = TweenService:Create(DialogFrame.UIScale, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
Scale = 1
})
globalConnectionManager:addTween(dialogTweenTransparency)
globalConnectionManager:addTween(dialogTweenScale)
dialogTweenTransparency:Play()
dialogTweenScale:Play()
local TitleLabel = Linux.Instance("TextLabel", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 30),
Position = UDim2.new(0, 10, 0, 10),
Font = Enum.Font.GothamBold,
Text = confirmationConfig.Title or "Confirm",
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 16,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 1002
})
TitleLabel.Text = confirmationConfig.Title or "Confirm"
local ContentLabel = Linux.Instance("TextLabel", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 50),
Position = UDim2.new(0, 10, 0, 45),
Font = Enum.Font.GothamSemibold,
		Text = confirmationConfig.Content or "Are you sure?",
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 1002
})
ContentLabel.Text = confirmationConfig.Content or "Are you sure?"
local ButtonsFrame = Linux.Instance("Frame", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 40),
Position = UDim2.new(0, 10, 1, -50),
ZIndex = 1002
})
Linux.Instance("UIListLayout", {
Parent = ButtonsFrame,
FillDirection = Enum.FillDirection.Horizontal,
HorizontalAlignment = Enum.HorizontalAlignment.Right,
VerticalAlignment = Enum.VerticalAlignment.Center,
Padding = UDim.new(0, 10)
})
local function closeDialog()
local closeTweenOverlay = TweenService:Create(ConfirmationOverlay, TweenInfo.new(0.2), { BackgroundTransparency = 1 })
local closeTweenDialogTransparency = TweenService:Create(DialogFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
BackgroundTransparency = 1
})
local closeTweenDialogScale = TweenService:Create(DialogFrame.UIScale, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
Scale = 0.9
})
globalConnectionManager:addTween(closeTweenOverlay)
globalConnectionManager:addTween(closeTweenDialogTransparency)
globalConnectionManager:addTween(closeTweenDialogScale)
closeTweenOverlay:Play()
closeTweenDialogTransparency:Play()
closeTweenDialogScale:Play()
closeTweenDialogScale.Completed:Wait()
for _, element in pairs(Main:GetDescendants()) do
if element:IsA("TextButton") or element:IsA("TextBox") or element:IsA("ImageButton") then
element.Active = true
end
end
ConfirmationOverlay:Destroy()
end
if confirmationConfig.Buttons then
for i, buttonConfig in ipairs(confirmationConfig.Buttons) do
local dialogButtonColor = i == 1 and Linux.Accents[Linux.CurrentAccent] or Color3.fromRGB(60, 60, 70)
local textColor = Color3.fromRGB(255, 255, 255)
if Linux.CurrentAccent == "Black & White" and i == 1 then
textColor = Color3.fromRGB(0, 0, 0)
end
local DialogButton = Linux.Instance("TextButton", {
Parent = ButtonsFrame,
BackgroundColor3 = dialogButtonColor,
BorderSizePixel = 0,
Size = UDim2.new(0, 80, 0, 30),
Font = Enum.Font.GothamSemibold,
Text = buttonConfig.Title or "Button",
TextColor3 = textColor,
TextSize = 14,
ZIndex = 1003,
AutoButtonColor = false,
Active = true
})
DialogButton.Text = buttonConfig.Title or "Button"
Linux.Instance("UICorner", {
Parent = DialogButton,
CornerRadius = UDim.new(0, 4)
})
globalConnectionManager:addConnection(DialogButton.MouseEnter:Connect(function()
local tween = TweenService:Create(DialogButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { 
Size = UDim2.new(0, 85, 0, 32)
})
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(DialogButton.MouseLeave:Connect(function()
local tween = TweenService:Create(DialogButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { 
Size = UDim2.new(0, 80, 0, 30)
})
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(DialogButton.MouseButton1Click:Connect(function()
closeDialog()
if buttonConfig.Callback then
spawn(function() Linux:SafeCallback(buttonConfig.Callback) end)
end
end))
end
end
globalConnectionManager:addConnection(ConfirmationOverlay.MouseButton1Click:Connect(function()
closeDialog()
end))
globalConnectionManager:addConnection(DialogFrame.MouseButton1Click:Connect(function() end))
end
globalConnectionManager:addConnection(Btn.MouseButton1Click:Connect(function()
if CollapseEnable then
toggleCollapseElements()
end
if config.Confirmation then
createConfirmationDialog(config.Confirmation)
else
spawn(function() Linux:SafeCallback(config.Callback) end)
end
end))
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Button",
Name = config.Name,
Instance = BtnFrame
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
globalConnectionManager:elementLoaded()
CheckEmptyState()
return Btn
end
function TabElements.Toggle(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local Toggle = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = Toggle,
CornerRadius = UDim.new(0, 6)
})
local ToggleText = Linux.Instance("TextLabel", {
Parent = Toggle,
BackgroundTransparency = 1,
Size = UDim2.new(1, -60, 1, 0),
Position = hasDescription and UDim2.new(0, 10, 0, -8) or UDim2.new(0, 10, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2,
Name = "ToggleText"
})
ToggleText.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(ToggleText, config.TranslationKey, "Text", nil, nil, nil)
end
local DescLabel = nil
if hasDescription then
DescLabel = Linux.Instance("TextLabel", {
Parent = Toggle,
BackgroundTransparency = 1,
Size = UDim2.new(1, -70, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.DescriptionTranslationKey and Linux.Translate(config.DescriptionTranslationKey) or config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
if config.DescriptionTranslationKey then
Linux.RegisterTranslatableElement(DescLabel, config.DescriptionTranslationKey, "Text", nil, nil, nil)
end
end
local ToggleTrack = Linux.Instance("Frame", {
Parent = Toggle,
BackgroundColor3 = Color3.fromRGB(18, 18, 18),
Size = UDim2.new(0, 36, 0, 18),
Position = UDim2.new(1, -46, 0.5, -9),
ZIndex = 2,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Name = "Track"
})
Linux.Instance("UICorner", {
Parent = ToggleTrack,
CornerRadius = UDim.new(1, 0)
})
local ToggleStroke = Linux.Instance("UIStroke", {
Parent = ToggleTrack,
Color = Color3.fromRGB(60, 60, 70),
Thickness = 1
})
local ToggleKnob = Linux.Instance("Frame", {
Parent = ToggleTrack,
BackgroundColor3 = Color3.fromRGB(200, 200, 210),
Size = UDim2.new(0, 14, 0, 14),
Position = UDim2.new(0, 2, 0.5, -7),
ZIndex = 3,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Name = "Knob"
})
Linux.Instance("UICorner", {
Parent = ToggleKnob,
CornerRadius = UDim.new(1, 0)
})
local State = config.Default or false
Toggle:SetAttribute("State", State)
Linux.RegisterToggleElement(Toggle)
local isToggling = false
local isDragToggle = false
local dragStartToggle = nil
local hasMovedToggle = false
local function UpdateToggle(thisToggle)
if isToggling then return end
isToggling = true
local currentState = thisToggle:GetAttribute("State")
local thisTrack = thisToggle:FindFirstChild("Track")
local thisKnob = thisTrack and thisTrack:FindFirstChild("Knob")
local thisStroke = thisTrack and thisTrack:FindFirstChild("UIStroke")
if thisTrack and thisKnob then
local tween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if currentState then
if Linux.CurrentAccent == "Black & White" then
local tween1 = TweenService:Create(thisTrack, tween, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
local tween2 = TweenService:Create(thisKnob, tween, { Position = UDim2.new(0, 20, 0.5, -7), BackgroundColor3 = Color3.fromRGB(0, 0, 0) })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 0 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
else
local tween1 = TweenService:Create(thisTrack, tween, { BackgroundColor3 = Linux.Accents[Linux.CurrentAccent] })
local tween2 = TweenService:Create(thisKnob, tween, { Position = UDim2.new(0, 20, 0.5, -7), BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 0 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end
local isAlreadyRegistered = false
for _, element in pairs(Linux.AccentElements) do
if element == thisTrack then
isAlreadyRegistered = true
break
end
end
if not isAlreadyRegistered and Linux.CurrentAccent ~= "Black & White" then
Linux.RegisterAccentElement(thisTrack)
end
else
local tween1 = TweenService:Create(thisTrack, tween, { BackgroundColor3 = Color3.fromRGB(17, 17, 18) })
local tween2 = TweenService:Create(thisKnob, tween, { Position = UDim2.new(0, 2, 0.5, -7), BackgroundColor3 = Color3.fromRGB(200, 200, 210) })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 1 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
for i, element in pairs(Linux.AccentElements) do
if element == thisTrack then
table.remove(Linux.AccentElements, i)
break
end
end
end
end
task.wait(0.25)
isToggling = false
end
local function SetValue(newState)
Toggle:SetAttribute("State", newState)
UpdateToggle(Toggle)
spawn(function() Linux:SafeCallback(config.Callback, newState) end)
end
UpdateToggle(Toggle)
spawn(function() Linux:SafeCallback(config.Callback, State) end)
local function toggleSwitch()
if not isToggling and not hasMovedToggle then
local newState = not Toggle:GetAttribute("State")
SetValue(newState)
end
end
globalConnectionManager:addConnection(ToggleTrack.InputBegan:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
isDragToggle = true
dragStartToggle = input.Position
hasMovedToggle = false
end
end))
globalConnectionManager:addConnection(ToggleTrack.InputChanged:Connect(function(input)
if isDragToggle and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local delta = input.Position - dragStartToggle
if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
hasMovedToggle = true
end
end
end))
globalConnectionManager:addConnection(ToggleTrack.InputEnded:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
if isDragToggle then
isDragToggle = false
if not hasMovedToggle then
toggleSwitch()
end
hasMovedToggle = false
end
end
end))
globalConnectionManager:addConnection(ToggleKnob.InputBegan:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
isDragToggle = true
dragStartToggle = input.Position
hasMovedToggle = false
end
end))
globalConnectionManager:addConnection(ToggleKnob.InputChanged:Connect(function(input)
if isDragToggle and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local delta = input.Position - dragStartToggle
if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
hasMovedToggle = true
end
end
end))
	globalConnectionManager:addConnection(ToggleKnob.InputEnded:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			if isDragToggle then
				isDragToggle = false
				if not hasMovedToggle then
					toggleSwitch()
				end
				hasMovedToggle = false
			end
		end
	end))
	globalConnectionManager:addConnection(Toggle.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			isDragToggle = true
			dragStartToggle = input.Position
			hasMovedToggle = false
		end
	end))
	globalConnectionManager:addConnection(Toggle.InputChanged:Connect(function(input)
		if isDragToggle and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStartToggle
			if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
				hasMovedToggle = true
			end
		end
	end))
	globalConnectionManager:addConnection(Toggle.InputEnded:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			if isDragToggle then
				isDragToggle = false
				if not hasMovedToggle then
					toggleSwitch()
				end
				hasMovedToggle = false
			end
		end
	end))
	targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Toggle",
Name = config.Name,
Instance = Toggle,
State = State
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function() 
local attr = Toggle:GetAttribute("State")
return attr ~= nil and attr or false
end,
SetValue = SetValue
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return Toggle
end
function TabElements.Checkbox(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local Checkbox = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = Checkbox,
CornerRadius = UDim.new(0, 6)
})
local CheckboxText = Linux.Instance("TextLabel", {
Parent = Checkbox,
BackgroundTransparency = 1,
Size = UDim2.new(1, -60, 1, 0),
Position = hasDescription and UDim2.new(0, 10, 0, -8) or UDim2.new(0, 10, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2,
Name = "CheckboxText"
})
CheckboxText.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(CheckboxText, config.TranslationKey, "Text", nil, nil, nil)
end
local DescLabel = nil
if hasDescription then
DescLabel = Linux.Instance("TextLabel", {
Parent = Checkbox,
BackgroundTransparency = 1,
Size = UDim2.new(1, -70, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.DescriptionTranslationKey and Linux.Translate(config.DescriptionTranslationKey) or config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
if config.DescriptionTranslationKey then
Linux.RegisterTranslatableElement(DescLabel, config.DescriptionTranslationKey, "Text", nil, nil, nil)
end
end
local CheckboxBox = Linux.Instance("Frame", {
Parent = Checkbox,
BackgroundColor3 = Color3.fromRGB(18, 18, 18),
Size = UDim2.new(0, 18, 0, 18),
Position = UDim2.new(1, -28, 0.5, -9),
ZIndex = 2,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Name = "Box"
})
Linux.Instance("UICorner", {
Parent = CheckboxBox,
CornerRadius = UDim.new(0, 4)
})
local CheckboxStroke = Linux.Instance("UIStroke", {
Parent = CheckboxBox,
Color = Color3.fromRGB(60, 60, 70),
Thickness = 1
})
local CheckIcon = Linux.Instance("ImageLabel", {
Parent = CheckboxBox,
BackgroundTransparency = 1,
Size = UDim2.new(0, 14, 0, 14),
Position = UDim2.new(0.5, -7, 0.5, -7),
Image = LucideIcons["check"],
ImageColor3 = Color3.fromRGB(255, 255, 255),
ImageTransparency = 1,
ZIndex = 3,
Name = "CheckIcon"
})
local State = config.Default or false
Checkbox:SetAttribute("State", State)
Linux.RegisterToggleElement(Checkbox)
table.insert(Linux.CheckboxElements, { Checkbox = Checkbox, Box = CheckboxBox, Icon = CheckIcon })
local isChecking = false
local isDragCheck = false
local dragStartCheck = nil
local hasMovedCheck = false
local function UpdateCheckbox(thisCheckbox)
if isChecking then return end
isChecking = true
local currentState = thisCheckbox:GetAttribute("State")
local thisBox = thisCheckbox:FindFirstChild("Box")
local thisIcon = thisBox and thisBox:FindFirstChild("CheckIcon")
local thisStroke = thisBox and thisBox:FindFirstChild("UIStroke")
if thisBox and thisIcon then
local tween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if currentState then
if Linux.CurrentAccent == "Black & White" then
local tween1 = TweenService:Create(thisBox, tween, { BackgroundColor3 = Color3.fromRGB(255, 255, 255) })
local tween2 = TweenService:Create(thisIcon, tween, { ImageTransparency = 0, ImageColor3 = Color3.fromRGB(0, 0, 0) })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 0 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
else
local tween1 = TweenService:Create(thisBox, tween, { BackgroundColor3 = Linux.Accents[Linux.CurrentAccent] })
local tween2 = TweenService:Create(thisIcon, tween, { ImageTransparency = 0, ImageColor3 = Color3.fromRGB(255, 255, 255) })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 0 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
end
local isAlreadyRegistered = false
for _, element in pairs(Linux.AccentElements) do
if element == thisBox then
isAlreadyRegistered = true
break
end
end
if not isAlreadyRegistered and Linux.CurrentAccent ~= "Black & White" then
Linux.RegisterAccentElement(thisBox)
end
else
local tween1 = TweenService:Create(thisBox, tween, { BackgroundColor3 = Color3.fromRGB(17, 17, 18) })
local tween2 = TweenService:Create(thisIcon, tween, { ImageTransparency = 1 })
if thisStroke then
local tween3 = TweenService:Create(thisStroke, tween, { Thickness = 1 })
globalConnectionManager:addTween(tween3)
tween3:Play()
end
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
for i, element in pairs(Linux.AccentElements) do
if element == thisBox then
table.remove(Linux.AccentElements, i)
break
end
end
end
end
task.wait(0.25)
isChecking = false
end
local function SetValue(newState)
Checkbox:SetAttribute("State", newState)
UpdateCheckbox(Checkbox)
spawn(function() Linux:SafeCallback(config.Callback, newState) end)
end
UpdateCheckbox(Checkbox)
spawn(function() Linux:SafeCallback(config.Callback, State) end)
local function toggleCheckbox()
if not isChecking and not hasMovedCheck then
local newState = not Checkbox:GetAttribute("State")
SetValue(newState)
end
end
globalConnectionManager:addConnection(CheckboxBox.InputBegan:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
isDragCheck = true
dragStartCheck = input.Position
hasMovedCheck = false
end
end))
globalConnectionManager:addConnection(CheckboxBox.InputChanged:Connect(function(input)
if isDragCheck and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local delta = input.Position - dragStartCheck
if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
hasMovedCheck = true
end
end
end))
globalConnectionManager:addConnection(CheckboxBox.InputEnded:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
if isDragCheck then
isDragCheck = false
if not hasMovedCheck then
toggleCheckbox()
end
hasMovedCheck = false
end
end
end))
globalConnectionManager:addConnection(CheckIcon.InputBegan:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
isDragCheck = true
dragStartCheck = input.Position
hasMovedCheck = false
end
end))
globalConnectionManager:addConnection(CheckIcon.InputChanged:Connect(function(input)
if isDragCheck and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
local delta = input.Position - dragStartCheck
if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
hasMovedCheck = true
end
end
end))
	globalConnectionManager:addConnection(CheckIcon.InputEnded:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			if isDragCheck then
				isDragCheck = false
				if not hasMovedCheck then
					toggleCheckbox()
				end
				hasMovedCheck = false
			end
		end
	end))
	globalConnectionManager:addConnection(Checkbox.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			isDragCheck = true
			dragStartCheck = input.Position
			hasMovedCheck = false
		end
	end))
	globalConnectionManager:addConnection(Checkbox.InputChanged:Connect(function(input)
		if isDragCheck and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStartCheck
			if math.abs(delta.X) > 5 or math.abs(delta.Y) > 5 then
				hasMovedCheck = true
			end
		end
	end))
	globalConnectionManager:addConnection(Checkbox.InputEnded:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) then
			if isDragCheck then
				isDragCheck = false
				if not hasMovedCheck then
					toggleCheckbox()
				end
				hasMovedCheck = false
			end
		end
	end))
	targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Checkbox",
Name = config.Name,
Instance = Checkbox,
State = State
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function() 
local attr = Checkbox:GetAttribute("State")
return attr ~= nil and attr or false
end,
SetValue = SetValue
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return Checkbox
end
function TabElements.Dropdown(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(true)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local Dropdown = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = Dropdown,
CornerRadius = UDim.new(0, 6)
})
local DropdownButton = Linux.Instance("TextButton", {
Parent = Dropdown,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Font = Enum.Font.GothamSemibold,
Text = "",
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
ZIndex = 2,
AutoButtonColor = false
})
local DropdownLabel = Linux.Instance("TextLabel", {
Parent = DropdownButton,
BackgroundTransparency = 1,
Size = UDim2.new(0.6, 0, 1, 0),
Position = hasDescription and UDim2.new(0, 10, 0, -8) or UDim2.new(0, 10, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
DropdownLabel.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(DropdownLabel, config.TranslationKey, "Text", nil, nil, nil)
end
local DescLabel = nil
if hasDescription then
DescLabel = Linux.Instance("TextLabel", {
Parent = DropdownButton,
BackgroundTransparency = 1,
Size = UDim2.new(0.6, -10, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.DescriptionTranslationKey and Linux.Translate(config.DescriptionTranslationKey) or config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
if config.DescriptionTranslationKey then
Linux.RegisterTranslatableElement(DescLabel, config.DescriptionTranslationKey, "Text", nil, nil, nil)
end
end
local Options = config.Options or {}
local SelectedValue = config.Default or (Options[1] or "None")
local IsMulti = config.Multi or false
local SelectedValues = {}
if IsMulti then
if typeof(config.Default) == "table" then
for _, value in pairs(config.Default) do
if table.find(Options, value) then
table.insert(SelectedValues, value)
end
end
elseif config.Default and table.find(Options, config.Default) then
table.insert(SelectedValues, config.Default)
end
end
local function FormatDisplayText(value)
if typeof(value) == "table" then
if #value > 0 then
local displayText = table.concat(value, ", ")
return displayText:sub(1, 20) .. (#displayText > 20 and "..." or "")
else
return "None"
end
else
return value and tostring(value) or "None"
end
end
local Selected = Linux.Instance("TextLabel", {
Parent = DropdownButton,
BackgroundTransparency = 1,
Size = UDim2.new(0.3, -21, 1, 0),
Position = UDim2.new(0.65, 5, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = IsMulti and FormatDisplayText(SelectedValues) or FormatDisplayText(SelectedValue),
TextColor3 = Color3.fromRGB(255, 255, 255),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Right,
ZIndex = 2
})
	local Arrow = Linux.Instance("ImageLabel", {
		Parent = DropdownButton,
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 16, 0, 16),
		Position = UDim2.new(1, -26, 0.5, -8),
		Image = "https://www.roblox.com/asset/?id=10709791437",
		ImageColor3 = Color3.fromRGB(210, 210, 210),
		Rotation = 0,
		ZIndex = 1
	})
	local DropFrame = Linux.Instance("Frame", {
		Parent = targetContainer,
		BackgroundColor3 = Color3.fromRGB(27, 27, 27),
		BackgroundTransparency = 0.80,
		BorderColor3 = Color3.fromRGB(39, 39, 42),
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 0, 0),
		ZIndex = 2,
		LayoutOrder = currentElementOrder + 1,
		ClipsDescendants = true,
		Visible = false,
		Name = "DropFrame"
	})
Linux.Instance("UICorner", {
Parent = DropFrame,
CornerRadius = UDim.new(0, 4)
})
local OptionsHolder = Linux.Instance("ScrollingFrame", {
Parent = DropFrame,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
CanvasSize = UDim2.new(0, 0, 0, 0),
AutomaticCanvasSize = Enum.AutomaticSize.Y,
ScrollBarThickness = 0,
ZIndex = 2,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
ScrollingEnabled = true
})
Linux.Instance("UIListLayout", {
Parent = OptionsHolder,
Padding = UDim.new(0, 2),
HorizontalAlignment = Enum.HorizontalAlignment.Center,
SortOrder = Enum.SortOrder.LayoutOrder
})
Linux.Instance("UIPadding", {
Parent = OptionsHolder,
PaddingLeft = UDim.new(0, 5),
PaddingRight = UDim.new(0, 5),
PaddingTop = UDim.new(0, 5),
PaddingBottom = UDim.new(0, 5)
})
local IsOpen = false
local function UpdateDropSize()
local optionHeight = 28
local paddingBetween = 2
local paddingTopBottom = 10
local maxHeight = 150
local numOptions = #Options
local calculatedHeight = numOptions * optionHeight + (numOptions > 0 and (numOptions - 1) * paddingBetween + paddingTopBottom or 0)
local finalHeight = math.min(calculatedHeight, maxHeight)
local tween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if IsOpen then
DropFrame.Visible = true
DropFrame.Size = UDim2.new(1, 0, 0, 0)
local tween1 = TweenService:Create(DropFrame, tween, { Size = UDim2.new(1, 0, 0, finalHeight) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if #Options > 0 then
local tween2 = TweenService:Create(Arrow, tween, { Rotation = 83 })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
else
local tween1 = TweenService:Create(DropFrame, tween, { Size = UDim2.new(1, 0, 0, 0) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if #Options > 0 then
local tween2 = TweenService:Create(Arrow, tween, { Rotation = 0 })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
task.delay(0.25, function()
if not IsOpen then
DropFrame.Visible = false
end
end)
end
end
local function UpdateSelectedText()
local newText = ""
if IsMulti then
newText = FormatDisplayText(SelectedValues)
else
newText = FormatDisplayText(SelectedValue)
end
Selected.TextTransparency = 1
Selected.Text = newText
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween = TweenService:Create(Selected, tweenInfo, { TextTransparency = 0 })
globalConnectionManager:addTween(tween)
tween:Play()
end
local function PopulateOptions()
for _, child in pairs(OptionsHolder:GetChildren()) do
if child:IsA("TextButton") or child:IsA("TextLabel") then
child:Destroy()
end
end
if IsOpen then
local filteredOptions = Options
for i, opt in pairs(filteredOptions) do
local isSelected = IsMulti and table.find(SelectedValues, opt) or opt == SelectedValue
local OptBtn = Linux.Instance("TextButton", {
Parent = OptionsHolder,
BackgroundColor3 = Color3.fromRGB(21, 21, 21),
BackgroundTransparency = 1,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, -4, 0, 28),
Font = Enum.Font.GothamSemibold,
Text = tostring(opt),
TextColor3 = isSelected and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(130, 130, 140),
TextSize = 14,
ZIndex = 3,
AutoButtonColor = false,
LayoutOrder = i
})
OptBtn.BackgroundTransparency = 1
OptBtn.TextTransparency = 1
local fadeInTween = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, i * 0.02)
local tween = TweenService:Create(OptBtn, fadeInTween, {
BackgroundTransparency = 1,
TextTransparency = 0
})
globalConnectionManager:addTween(tween)
tween:Play()
Linux.Instance("UICorner", {
Parent = OptBtn,
CornerRadius = UDim.new(0, 4)
})
local OptAccentBar = Linux.Instance("Frame", {
Parent = OptBtn,
BackgroundColor3 = Linux.Accents[Linux.CurrentAccent],
BackgroundTransparency = 0,
BorderSizePixel = 0,
Size = (isSelected and Linux.DropdownBar) and UDim2.new(0, 4, 0, 20) or UDim2.new(0, 0, 0, 20),
Position = UDim2.new(0, 0, 0.5, -10),
ZIndex = 4,
Visible = Linux.DropdownBar
})
Linux.Instance("UICorner", {
Parent = OptAccentBar,
CornerRadius = UDim.new(0, 4)
})
if Linux.DropdownBar then
Linux.RegisterAccentElement(OptAccentBar)
end
local textAnimTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if isSelected then
OptBtn.TextColor3 = Color3.fromRGB(130, 130, 140)
local tween = TweenService:Create(OptBtn, textAnimTween, { TextColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
else
OptBtn.TextColor3 = Color3.fromRGB(100, 100, 110)
local tween = TweenService:Create(OptBtn, textAnimTween, { TextColor3 = Color3.fromRGB(130, 130, 140) })
globalConnectionManager:addTween(tween)
tween:Play()
end
globalConnectionManager:addConnection(OptBtn.MouseButton1Click:Connect(function()
if IsMulti then
local index = table.find(SelectedValues, opt)
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local colorTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if index then
table.remove(SelectedValues, index)
local tween1 = TweenService:Create(OptBtn, colorTween, { TextColor3 = Color3.fromRGB(130, 130, 140) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if Linux.DropdownBar then
local tween2 = TweenService:Create(OptAccentBar, tweenInfo, { Size = UDim2.new(0, 0, 0, 20) })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
else
table.insert(SelectedValues, opt)
local tween1 = TweenService:Create(OptBtn, colorTween, { TextColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if Linux.DropdownBar then
local tween2 = TweenService:Create(OptAccentBar, tweenInfo, { Size = UDim2.new(0, 4, 0, 20) })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
end
UpdateSelectedText()
spawn(function() Linux:SafeCallback(config.Callback, SelectedValues) end)
else
if opt ~= SelectedValue then
SelectedValue = opt
Selected.TextTransparency = 1
Selected.Text = FormatDisplayText(opt)
Selected.TextColor3 = Color3.fromRGB(255, 255, 255)
local displayTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local displayTween = TweenService:Create(Selected, displayTweenInfo, { TextTransparency = 0 })
globalConnectionManager:addTween(displayTween)
displayTween:Play()
for _, btn in pairs(OptionsHolder:GetChildren()) do
if btn:IsA("TextButton") then
local btnAccentBar = btn:FindFirstChild("Frame")
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local colorTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
if btn.Text == tostring(opt) then
local tween1 = TweenService:Create(btn, colorTween, { TextColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if btnAccentBar and Linux.DropdownBar then
local tween2 = TweenService:Create(btnAccentBar, tweenInfo, { Size = UDim2.new(0, 4, 0, 20) })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
else
local tween1 = TweenService:Create(btn, colorTween, { TextColor3 = Color3.fromRGB(130, 130, 140) })
globalConnectionManager:addTween(tween1)
tween1:Play()
if btnAccentBar and Linux.DropdownBar then
local tween2 = TweenService:Create(btnAccentBar, tweenInfo, { Size = UDim2.new(0, 0, 0, 20) })
globalConnectionManager:addTween(tween2)
tween2:Play()
end
end
end
end
spawn(function() Linux:SafeCallback(config.Callback, opt) end)
end
end
end))
end
end
UpdateDropSize()
end
if #Options > 0 then
PopulateOptions()
if IsMulti then
spawn(function() Linux:SafeCallback(config.Callback, SelectedValues) end)
else
spawn(function() Linux:SafeCallback(config.Callback, SelectedValue) end)
end
end
globalConnectionManager:addConnection(DropdownButton.MouseButton1Click:Connect(function()
IsOpen = not IsOpen
PopulateOptions()
end))
local function SetOptions(newOptions)
Options = newOptions or {}
if IsMulti then
SelectedValues = {}
else
SelectedValue = Options[1] or "None"
end
UpdateSelectedText()
IsOpen = false
UpdateDropSize()
PopulateOptions()
if IsMulti then
spawn(function() Linux:SafeCallback(config.Callback, SelectedValues) end)
else
spawn(function() Linux:SafeCallback(config.Callback, SelectedValue) end)
end
end
local function SetValue(value)
if IsMulti then
if typeof(value) == "table" then
SelectedValues = {}
for _, v in pairs(value) do
if table.find(Options, v) then
table.insert(SelectedValues, v)
end
end
elseif table.find(Options, value) then
SelectedValues = { value }
end
UpdateSelectedText()
else
if table.find(Options, value) then
SelectedValue = value
Selected.TextTransparency = 1
Selected.Text = FormatDisplayText(value)
Selected.TextColor3 = Color3.fromRGB(255, 255, 255)
local displayTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local displayTween = TweenService:Create(Selected, displayTweenInfo, { TextTransparency = 0 })
globalConnectionManager:addTween(displayTween)
displayTween:Play()
end
end
IsOpen = false
UpdateDropSize()
PopulateOptions()
if IsMulti then
spawn(function() Linux:SafeCallback(config.Callback, SelectedValues) end)
else
spawn(function() Linux:SafeCallback(config.Callback, SelectedValue) end)
end
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Dropdown",
Name = config.Name,
Instance = Dropdown,
Value = IsMulti and SelectedValues or SelectedValue
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function() 
local val = IsMulti and SelectedValues or SelectedValue
return val ~= nil and val or (IsMulti and {} or "")
end,
SetValue = SetValue
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = Dropdown,
SetOptions = SetOptions,
SetValue = SetValue,
GetValue = function() return IsMulti and SelectedValues or SelectedValue end
}
end
function TabElements.Slider(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = hasDescription and 68 or 42
local Slider = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = Slider,
CornerRadius = UDim.new(0, 6)
})
local TitleLabel = Linux.Instance("TextLabel", {
Parent = Slider,
BackgroundTransparency = 1,
Size = UDim2.new(0.6, 0, 0, 16),
Position = UDim2.new(0, 10, 0, 4),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
TitleLabel.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(TitleLabel, config.TranslationKey, "Text", nil, nil, nil)
end
local DescLabel = nil
if hasDescription then
DescLabel = Linux.Instance("TextLabel", {
Parent = Slider,
BackgroundTransparency = 1,
Size = UDim2.new(1, -70, 0, 16),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.DescriptionTranslationKey and Linux.Translate(config.DescriptionTranslationKey) or config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
if config.DescriptionTranslationKey then
Linux.RegisterTranslatableElement(DescLabel, config.DescriptionTranslationKey, "Text", nil, nil, nil)
end
end
local SliderBar = Linux.Instance("Frame", {
Parent = Slider,
BackgroundColor3 = Color3.fromRGB(28, 28, 28),
BackgroundTransparency = 0.7,
Size = UDim2.new(1, -20, 0, 6),
Position = UDim2.new(0, 10, 0, hasDescription and 50 or 26),
ZIndex = 2,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Name = "Bar"
})
local ValueLabel = Linux.Instance("TextLabel", {
Parent = Slider,
BackgroundColor3 = Color3.fromRGB(30, 30, 30),
BackgroundTransparency = 0.7,
Size = UDim2.new(0, 50, 0, 16),
Position = UDim2.new(1, -60, 0, 4),
Font = Enum.Font.GothamSemibold,
Text = "",
TextColor3 = Color3.fromRGB(255, 255, 255),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Center,
ZIndex = 2,
BorderSizePixel = 0,
Name = "Value"
})
Linux.Instance("UICorner", {
Parent = ValueLabel,
CornerRadius = UDim.new(0, 4)
})
	local FillBar = Linux.Instance("Frame", {
		Parent = SliderBar,
		BackgroundColor3 = Linux.Accents[Linux.CurrentAccent],
		Size = UDim2.new(0, 0, 1, 0),
		ZIndex = 2,
		BorderSizePixel = 1,
		BorderColor3 = Color3.fromRGB(39, 39, 42),
		Name = "Fill"
	})
	Linux.Instance("UICorner", {
		Parent = FillBar,
		CornerRadius = UDim.new(1, 0)
	})
	Linux.RegisterAccentElement(FillBar)
local SliderKnob = Linux.Instance("Frame", {
Parent = SliderBar,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
Size = UDim2.new(0, 12, 0, 12),
Position = UDim2.new(0, 0, 0.5, 0),
AnchorPoint = Vector2.new(0.5, 0.5),
ZIndex = 4,
BorderSizePixel = 0,
Name = "Knob"
})
Linux.Instance("UICorner", {
Parent = SliderKnob,
CornerRadius = UDim.new(1, 0)
})
Linux.RegisterSliderElement(Slider)
local SliderButton = Linux.Instance("TextButton", {
Parent = SliderBar,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Text = "",
ZIndex = 3
})
local Min = config.Min or 0
local Max = config.Max or 100
local Rounding = config.Rounding or 0
local Percentage = config.Percentage or false
Slider:SetAttribute("Min", Min)
Slider:SetAttribute("Max", Max)
Slider:SetAttribute("Rounding", Rounding)
Slider:SetAttribute("Percentage", Percentage)
local Value = config.Default or Min
Slider:SetAttribute("Value", Value)
	local isDraggingSlider = false
	local animationConnection = nil
	local scrollContainer = Slider.Parent
	if scrollContainer and not scrollContainer:IsA("ScrollingFrame") then
		scrollContainer = scrollContainer.Parent
		if scrollContainer and not scrollContainer:IsA("ScrollingFrame") then
			scrollContainer = scrollContainer.Parent
		end
	end
	local function StartContinuousAnimation()
		if animationConnection then
			globalConnectionManager:addConnection(animationConnection)
			animationConnection:Disconnect()
			animationConnection = nil
		end
		animationConnection = globalConnectionManager:addUpdateLoop(RunService.Heartbeat:Connect(function()
			if isDraggingSlider then
				local tween1 = TweenService:Create(ValueLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextSize = 16 })
				globalConnectionManager:addTween(tween1)
				tween1:Play()
				tween1.Completed:Wait()
				local tween2 = TweenService:Create(ValueLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextSize = 14 })
				globalConnectionManager:addTween(tween2)
				tween2:Play()
				tween2.Completed:Wait()
			else
				if animationConnection then
					animationConnection:Disconnect()
					animationConnection = nil
				end
			end
		end))
	end
local function StopContinuousAnimation()
if animationConnection then
animationConnection:Disconnect()
animationConnection = nil
end
local finalTween = TweenService:Create(ValueLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextSize = 14 })
globalConnectionManager:addTween(finalTween)
finalTween:Play()
end
local function FormatValue(value)
local formattedValue
if Rounding <= 0 then
formattedValue = tostring(math.floor(value))
else
local mult = 10 ^ Rounding
formattedValue = tostring(math.floor(value * mult) / mult)
end
if Percentage then
formattedValue = formattedValue .. "%"
end
if Linux.ShowSliderMax then
local maxValue = Slider:GetAttribute("Max")
local maxFormatted
if Rounding <= 0 then
maxFormatted = tostring(math.floor(maxValue))
else
local mult = 10 ^ Rounding
maxFormatted = tostring(math.floor(maxValue * mult) / mult)
end
if Percentage then
maxFormatted = maxFormatted .. "%"
end
return string.format('<font color="rgb(255, 255, 255)">%s</font><font color="rgb(150, 150, 160)">/%s</font>', formattedValue, maxFormatted)
end
return formattedValue
end
local function UpdateSlider(pos)
local barSize = SliderBar.AbsoluteSize.X
local relativePos = math.clamp((pos - SliderBar.AbsolutePosition.X) / barSize, 0, 1)
local min = Slider:GetAttribute("Min")
local max = Slider:GetAttribute("Max")
local rounding = Slider:GetAttribute("Rounding")
local value = min + (max - min) * relativePos
if rounding <= 0 then
value = math.floor(value + 0.5)
else
local mult = 10 ^ rounding
value = math.floor(value * mult + 0.5) / mult
end
Slider:SetAttribute("Value", value)
local tween = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween1 = TweenService:Create(FillBar, tween, { Size = UDim2.new(relativePos, 0, 1, 0) })
local tween2 = TweenService:Create(SliderKnob, tween, { Position = UDim2.new(relativePos, 0, 0.5, 0) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
if Linux.ShowSliderMax then
ValueLabel.RichText = true
end
ValueLabel.Text = FormatValue(value)
spawn(function() Linux:SafeCallback(config.Callback, value) end)
end
	globalConnectionManager:addConnection(SliderButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
			if Linux.CurrentActiveSlider and Linux.CurrentActiveSlider ~= Slider then
				return
			end
			isDraggingSlider = true
			Linux.CurrentActiveSlider = Slider
			if scrollContainer and scrollContainer:IsA("ScrollingFrame") then
				scrollContainer.ScrollingEnabled = false
			end
			for _, sliderElement in ipairs(Linux.SliderElements) do
				if sliderElement ~= Slider then
					local otherSliderButton = sliderElement:FindFirstChild("Bar") and sliderElement.Bar:FindFirstChild("TextButton")
					if otherSliderButton then
						otherSliderButton.Active = false
					end
				end
			end
			StartContinuousAnimation()
			UpdateSlider(input.Position.X)
			local tween = TweenService:Create(SliderKnob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 16, 0, 16) })
			globalConnectionManager:addTween(tween)
			tween:Play()
		end
	end))
	globalConnectionManager:addConnection(SliderButton.MouseEnter:Connect(function()
		if not isDraggingSlider then
			local tween = TweenService:Create(SliderKnob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 16, 0, 16) })
			globalConnectionManager:addTween(tween)
			tween:Play()
		end
	end))
	globalConnectionManager:addConnection(SliderButton.MouseLeave:Connect(function()
		if not isDraggingSlider then
			local tween = TweenService:Create(SliderKnob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 12, 0, 12) })
			globalConnectionManager:addTween(tween)
			tween:Play()
		end
	end))
	globalConnectionManager:addConnection(UserInputService.InputChanged:Connect(function(input)
		if isDraggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			UpdateSlider(input.Position.X)
		end
	end))
	globalConnectionManager:addConnection(UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
			if isDraggingSlider then
				isDraggingSlider = false
				Linux.CurrentActiveSlider = nil
				if scrollContainer and scrollContainer:IsA("ScrollingFrame") then
					scrollContainer.ScrollingEnabled = true
				end
				for _, sliderElement in ipairs(Linux.SliderElements) do
					local otherSliderButton = sliderElement:FindFirstChild("Bar") and sliderElement.Bar:FindFirstChild("TextButton")
					if otherSliderButton then
						otherSliderButton.Active = true
					end
				end
				StopContinuousAnimation()
				local tween = TweenService:Create(SliderKnob, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(0, 12, 0, 12) })
				globalConnectionManager:addTween(tween)
				tween:Play()
			end
		end
	end))
local function SetValue(newValue)
local min = Slider:GetAttribute("Min")
local max = Slider:GetAttribute("Max")
local rounding = Slider:GetAttribute("Rounding")
newValue = math.clamp(newValue, min, max)
if rounding <= 0 then
newValue = math.floor(newValue + 0.5)
else
local mult = 10 ^ rounding
newValue = math.floor(newValue * mult + 0.5) / mult
end
Slider:SetAttribute("Value", newValue)
local relativePos = (newValue - min) / (max - min)
local tween = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tween1 = TweenService:Create(FillBar, tween, { Size = UDim2.new(relativePos, 0, 1, 0) })
local tween2 = TweenService:Create(SliderKnob, tween, { Position = UDim2.new(relativePos, 0, 0.5, 0) })
globalConnectionManager:addTween(tween1)
globalConnectionManager:addTween(tween2)
tween1:Play()
tween2:Play()
if Linux.ShowSliderMax then
ValueLabel.RichText = true
end
ValueLabel.Text = FormatValue(newValue)
spawn(function() Linux:SafeCallback(config.Callback, newValue) end)
end
SetValue(Value)
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Slider",
Name = config.Name,
Instance = Slider,
Value = Value
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function() 
local attr = Slider:GetAttribute("Value")
return attr ~= nil and attr or 0
end,
SetValue = SetValue
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = Slider,
SetValue = SetValue,
GetValue = function() return Slider:GetAttribute("Value") end,
SetMin = function(min)
Slider:SetAttribute("Min", min)
SetValue(Slider:GetAttribute("Value"))
end,
SetMax = function(max)
Slider:SetAttribute("Max", max)
SetValue(Slider:GetAttribute("Value"))
end,
SetRounding = function(rounding)
Slider:SetAttribute("Rounding", rounding)
SetValue(Slider:GetAttribute("Value"))
end,
SetPercentage = function(percentage)
Slider:SetAttribute("Percentage", percentage)
Percentage = percentage
if Linux.ShowSliderMax then
ValueLabel.RichText = true
end
ValueLabel.Text = FormatValue(Slider:GetAttribute("Value"))
end
}
end
function TabElements.Input(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local Input = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = Input,
CornerRadius = UDim.new(0, 6)
})
local InputLabel = Linux.Instance("TextLabel", {
Parent = Input,
BackgroundTransparency = 1,
Size = UDim2.new(0.5, 0, 1, 0),
Position = hasDescription and UDim2.new(0, 10, 0, -8) or UDim2.new(0, 10, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
InputLabel.Text = config.Name
if hasDescription then
local DescLabel = Linux.Instance("TextLabel", {
Parent = Input,
BackgroundTransparency = 1,
Size = UDim2.new(0.5, -10, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
DescLabel.Text = config.Description
end
local IsNumeric = config.Numeric or false
local Finished = config.Finished or false
local hasIcon = config.Icon and config.Icon ~= ""
local inputIcon = nil
local iconOffset = 0
local TextBoxFrame = Linux.Instance("Frame", {
Parent = Input,
BackgroundColor3 = Color3.fromRGB(14, 14, 14),
BackgroundTransparency = 0.6,
BorderSizePixel = 0,
Size = UDim2.new(0.5, -20, 0, 30),
Position = UDim2.new(0.5, 10, 0.5, -15),
ZIndex = 3
})
Linux.Instance("UICorner", {
Parent = TextBoxFrame,
CornerRadius = UDim.new(0, 7)
})
Linux.Instance("UIStroke", {
Parent = TextBoxFrame,
Color = Color3.fromRGB(30, 30, 30),
Thickness = 0,
ApplyStrokeMode = Enum.ApplyStrokeMode.Border
})
if hasIcon then
local resolvedIcon = resolveIcon(config.Icon)
if resolvedIcon then
inputIcon = Linux.Instance("ImageLabel", {
Parent = TextBoxFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 16, 0, 16),
Position = UDim2.new(0, 6, 0.5, -8),
Image = resolvedIcon,
ImageColor3 = config.IconColor or Color3.fromRGB(150, 150, 160),
ZIndex = 5
})
iconOffset = 22
end
end
local TextBox = Linux.Instance("TextBox", {
Parent = TextBoxFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -16 - iconOffset, 1, -6),
Position = UDim2.new(0, 8 + iconOffset, 0, 3),
Font = Enum.Font.GothamSemibold,
Text = config.Default or "",
PlaceholderText = config.Placeholder or (IsNumeric and "Number here" or "Text here"),
PlaceholderColor3 = Color3.fromRGB(120, 120, 130),
TextColor3 = Color3.fromRGB(255, 255, 255),
TextSize = 12,
TextScaled = false,
TextTruncate = Enum.TextTruncate.AtEnd,
TextXAlignment = hasIcon and Enum.TextXAlignment.Left or Enum.TextXAlignment.Center,
ClearTextOnFocus = false,
ClipsDescendants = true,
ZIndex = 4
})
TextBox.PlaceholderText = config.PlaceholderTranslationKey and Linux.Translate(config.PlaceholderTranslationKey) or (config.Placeholder or (IsNumeric and "Number here" or "Text here"))
if config.PlaceholderTranslationKey then
Linux.RegisterTranslatableElement(TextBox, "", "Text", nil, nil, config.PlaceholderTranslationKey)
end
local MaxLength = 100
local function FilterNumericInput(text)
if not IsNumeric then
return text
end
local filtered = string.gsub(text, "[^%d%.%-]", "")
local _, decimalCount = string.gsub(filtered, "%.", "")
if decimalCount > 1 then
local firstDecimal = string.find(filtered, "%.")
filtered = string.sub(filtered, 1, firstDecimal) .. string.gsub(string.sub(filtered, firstDecimal + 1), "%.", "")
end
if string.find(filtered, "%-") then
local hasNegative = string.sub(filtered, 1, 1) == "-"
filtered = string.gsub(filtered, "%-", "")
if hasNegative then
filtered = "-" .. filtered
end
end
return filtered
end
local function CheckTextBounds()
local currentText = TextBox.Text
if IsNumeric then
currentText = FilterNumericInput(currentText)
end
if #currentText > MaxLength then
currentText = string.sub(currentText, 1, MaxLength)
end
if currentText ~= TextBox.Text then
TextBox.Text = currentText
end
end
globalConnectionManager:addConnection(TextBox:GetPropertyChangedSignal("Text"):Connect(function()
CheckTextBounds()
end))
local function UpdateInput()
CheckTextBounds()
local value = TextBox.Text
if IsNumeric and value ~= "" then
local numValue = tonumber(value)
if numValue then
spawn(function() Linux:SafeCallback(config.Callback, numValue) end)
else
spawn(function() Linux:SafeCallback(config.Callback, 0) end)
end
else
spawn(function() Linux:SafeCallback(config.Callback, value) end)
end
end
globalConnectionManager:addConnection(TextBox.FocusLost:Connect(function(enterPressed)
if Finished then
if enterPressed then
UpdateInput()
end
else
UpdateInput()
end
end))
if not Finished then
globalConnectionManager:addConnection(TextBox:GetPropertyChangedSignal("Text"):Connect(function()
UpdateInput()
end))
end
globalConnectionManager:addConnection(TextBox.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
TextBox:CaptureFocus()
end
end))
if not Finished then
spawn(function()
local value = TextBox.Text
if IsNumeric and value ~= "" then
local numValue = tonumber(value)
Linux:SafeCallback(config.Callback, numValue or 0)
else
Linux:SafeCallback(config.Callback, value)
end
end)
end
local function SetValue(newValue)
local text = tostring(newValue)
if IsNumeric then
text = FilterNumericInput(text)
end
if #text > MaxLength then
text = string.sub(text, 1, MaxLength)
end
TextBox.Text = text
if not Finished then
UpdateInput()
end
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Input",
Name = config.Name,
Instance = Input,
Value = TextBox.Text
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function()
if TextBox and TextBox.Text then
if IsNumeric and TextBox.Text ~= "" then
return tonumber(TextBox.Text) or 0
else
return TextBox.Text
end
else
return IsNumeric and 0 or ""
end
end,
SetValue = SetValue,
IsAutoLoadInput = config.IsAutoLoadInput
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = Input,
SetValue = SetValue,
GetValue = function()
if IsNumeric and TextBox.Text ~= "" then
return tonumber(TextBox.Text) or 0
else
return TextBox.Text
end
end
}
end
function TabElements.Label(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local LabelFrame = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 36),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = LabelFrame,
CornerRadius = UDim.new(0, 4)
})
local iconOffset = 0
local LabelIcon = nil
if config.Icon then
local resolvedIcon = resolveIcon(config.Icon)
if resolvedIcon then
LabelIcon = Linux.Instance("ImageLabel", {
Parent = LabelFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 18, 0, 18),
Position = UDim2.new(0, 10, 0.5, -9),
Image = resolvedIcon,
ImageColor3 = Color3.fromRGB(200, 200, 210),
ZIndex = 2
})
iconOffset = 33
end
end
local LabelText = Linux.Instance("TextLabel", {
Parent = LabelFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20 - iconOffset, 1, 0),
Position = UDim2.new(0, 10 + iconOffset, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Text or "Label",
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
TextTruncate = Enum.TextTruncate.AtEnd,
ZIndex = 2
})
LabelText.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or (config.Text or "Label")
if config.TranslationKey then
Linux.RegisterTranslatableElement(LabelText, config.TranslationKey, "Text", nil, nil, nil)
end
local UpdateConnection = nil
local lastUpdate = 0
local updateInterval = 0.001
local function StartUpdateLoop()
if UpdateConnection then
UpdateConnection:Disconnect()
UpdateConnection = nil
end
if config.UpdateCallback then
UpdateConnection = globalConnectionManager:addUpdateLoop(RunService.Heartbeat:Connect(function()
if not LabelFrame:IsDescendantOf(game) then
UpdateConnection:Disconnect()
UpdateConnection = nil
return
end
local currentTime = tick()
if currentTime - lastUpdate >= updateInterval then
local success, newText = pcall(config.UpdateCallback)
if success and newText ~= nil then
LabelText.Text = tostring(newText)
elseif not success then
print("Error in label update callback:", newText)
end
lastUpdate = currentTime
end
end))
end
end
local function SetText(newText)
if config.UpdateCallback then
config.Text = tostring(newText)
else
LabelText.Text = tostring(newText)
end
end
if config.UpdateCallback then
StartUpdateLoop()
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Label",
Name = config.Text or "Label",
Instance = LabelFrame
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = LabelFrame,
SetText = SetText,
GetText = function() return LabelText.Text end
}
end
function TabElements.Section(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local sectionSize = config.Size or 30
local Section = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 0, sectionSize),
ZIndex = 2,
LayoutOrder = currentElementOrder,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(39, 39, 42),
Name = "Section"
})
local iconOffset = 0
local SectionIcon = nil
if config.Icon then
local resolvedIcon = resolveIcon(config.Icon)
if resolvedIcon then
SectionIcon = Linux.Instance("ImageLabel", {
Parent = Section,
BackgroundTransparency = 1,
Size = UDim2.new(0, 20, 0, 20),
Position = config.Center and UDim2.new(0.5, -40, 0.5, -10) or UDim2.new(0, 0, 0.5, -10),
Image = resolvedIcon,
ImageColor3 = config.IconColor or Linux.Accents[Linux.CurrentAccent],
ZIndex = 2
})
if config.IconGradient and config.IconGradient.Enabled then
local iconGradient = Linux.Instance("UIGradient", {
Parent = SectionIcon,
Color = config.IconGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
},
Rotation = config.IconGradient.Rotation or 0
})
else
Linux.RegisterSectionElement(SectionIcon)
end
iconOffset = config.Center and 0 or 25
end
end
local SectionLabel = Linux.Instance("TextLabel", {
Parent = Section,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20 - iconOffset, 1, 0),
Position = config.Center and UDim2.new(0, 10, 0, 0) or UDim2.new(0, iconOffset, 0, 0),
Font = Enum.Font.GothamBold,
Text = config.Name,
TextColor3 = config.TextColor or Color3.fromRGB(255, 255, 255),
TextSize = 18,
TextXAlignment = config.Center and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left,
TextYAlignment = Enum.TextYAlignment.Center,
ZIndex = 2
})
SectionLabel.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(SectionLabel, config.TranslationKey, "Text", nil, nil, nil)
end
if config.Center and SectionIcon then
SectionIcon.Position = UDim2.new(0.5, -10 - (SectionLabel.TextBounds.X / 2), 0.5, -10)
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Section",
Name = config.Name,
Instance = Section
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
globalConnectionManager:elementLoaded()
	CheckEmptyState()
	return Section
end
function TabElements.Divider(config)
	local targetContainer, targetListLayout = getTargetContainer()
	local currentElementOrder = updateElementOrder(false)
	local dividerHeight = config.Height or 1
	local dividerSize = config.Size or 10
	local Divider = Linux.Instance("Frame", {
		Parent = targetContainer,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, dividerSize),
		ZIndex = 2,
		LayoutOrder = currentElementOrder,
		BorderSizePixel = 0,
		BorderColor3 = Color3.fromRGB(39, 39, 42),
		Name = "Divider"
	})
	local DividerLine = Linux.Instance("Frame", {
		Parent = Divider,
		BackgroundColor3 = config.Color or Color3.fromRGB(26, 26, 28),
		BackgroundTransparency = 0,
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 0, dividerHeight),
		Position = UDim2.new(0, 0, 0.5, -dividerHeight / 2),
		ZIndex = 2
	})
	targetContainer.CanvasPosition = Vector2.new(0, 0)
	local element = {
		Type = "Divider",
		Name = config.Name or "Divider",
		Instance = Divider
	}
	table.insert(Tabs[tabIndex].Elements, element)
	table.insert(AllElements, { Tab = tabIndex, Element = element })
	globalConnectionManager:elementLoaded()
	CheckEmptyState()
	return Divider
end
function TabElements.Paragraph(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local formatText = config.FormatText or false
local function ProcessLineBreaks(text)
return string.gsub(text, " / ", "\n")
end
local function ProcessTextFormatting(text)
if not formatText then
return text
end
text = string.gsub(text, "%*%*(.-)%*%*", '<font color="rgb(255, 255, 255)"><b>%1</b></font>')
text = string.gsub(text, "%*(.-)%*", "<i>%1</i>")
text = string.gsub(text, "__(.-)__", "<u>%1</u>")
text = string.gsub(text, "~~(.-)~~", "<s>%1</s>")
return text
end
local ParagraphFrame = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = config.BackgroundColor or Linux.FrameColor,
BackgroundTransparency = config.BackgroundTransparency or Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, 0),
AutomaticSize = Enum.AutomaticSize.Y,
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = ParagraphFrame,
CornerRadius = UDim.new(0, 4)
})
if config.BackgroundGradient and config.BackgroundGradient.Enabled then
local bgGradient = Linux.Instance("UIGradient", {
Parent = ParagraphFrame,
Color = config.BackgroundGradient.Color or ColorSequence.new{
ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30))
},
Rotation = config.BackgroundGradient.Rotation or 0
})
end
local TitleLabel = Linux.Instance("TextLabel", {
Parent = ParagraphFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 26),
Position = UDim2.new(0, 10, 0, 5),
Font = Enum.Font.GothamBold,
Text = config.Title or "Paragraph",
TextColor3 = Color3.fromRGB(210, 210, 210),
TextSize = 16,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
TitleLabel.Text = config.TitleTranslationKey and Linux.Translate(config.TitleTranslationKey) or (config.Title or "Paragraph")
if config.TitleTranslationKey then
Linux.RegisterTranslatableElement(TitleLabel, config.TitleTranslationKey, "Text", nil, nil, nil)
end
local Content = Linux.Instance("TextLabel", {
Parent = ParagraphFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -20, 0, 0),
Position = UDim2.new(0, 10, 0, 30),
Font = Enum.Font.GothamSemibold,
		Text = ProcessTextFormatting(ProcessLineBreaks(config.ContentTranslationKey and Linux.Translate(config.ContentTranslationKey) or (config.Content or "Content"))),
		TextColor3 = Color3.fromRGB(150, 150, 155),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = true,
		TextTruncate = Enum.TextTruncate.None,
		AutomaticSize = Enum.AutomaticSize.Y,
		RichText = formatText,
		ZIndex = 2
})
if config.ContentTranslationKey then
Linux.RegisterTranslatableElement(Content, config.ContentTranslationKey, "Text", nil, nil, nil)
end
Linux.Instance("UIPadding", {
Parent = ParagraphFrame,
PaddingBottom = UDim.new(0, 10)
})
local function SetTitle(newTitle)
TitleLabel.Text = tostring(newTitle)
end
local function SetContent(newContent)
Content.Text = ProcessTextFormatting(ProcessLineBreaks(tostring(newContent)))
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "Paragraph",
Name = config.Title or "Paragraph",
Instance = ParagraphFrame
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = ParagraphFrame,
SetTitle = SetTitle,
SetContent = SetContent
}
end
function TabElements.ColorPicker(config)
local targetContainer, targetListLayout = getTargetContainer()
local currentElementOrder = updateElementOrder(false)
local hasDescription = config.Description and config.Description ~= ""
local frameHeight = 42
local ColorPicker = Linux.Instance("Frame", {
Parent = targetContainer,
BackgroundColor3 = Linux.FrameColor,
BackgroundTransparency = Linux.FrameTransparency,
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 0,
Size = UDim2.new(1, 0, 0, frameHeight),
ZIndex = 1,
LayoutOrder = currentElementOrder
})
Linux.Instance("UICorner", {
Parent = ColorPicker,
CornerRadius = UDim.new(0, 6)
})
local ColorText = Linux.Instance("TextLabel", {
Parent = ColorPicker,
BackgroundTransparency = 1,
Size = UDim2.new(1, -60, 1, 0),
Position = hasDescription and UDim2.new(0, 10, 0, -8) or UDim2.new(0, 10, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = config.Name,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 2
})
ColorText.Text = config.TranslationKey and Linux.Translate(config.TranslationKey) or config.Name
if config.TranslationKey then
Linux.RegisterTranslatableElement(ColorText, config.TranslationKey, "Text", nil, nil, nil)
end
if hasDescription then
local DescLabel = Linux.Instance("TextLabel", {
Parent = ColorPicker,
BackgroundTransparency = 1,
Size = UDim2.new(1, -70, 0, 12),
Position = UDim2.new(0, 10, 0, 22),
Font = Enum.Font.GothamSemibold,
		Text = config.Description,
		TextColor3 = Color3.fromRGB(150, 150, 160),
		TextSize = 12,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextWrapped = false,
		TextTruncate = Enum.TextTruncate.None,
		ZIndex = 2
})
DescLabel.Text = config.Description
end
local CurrentColor = config.Default or Color3.fromRGB(255, 0, 0)
local RealTimeUpdate = config.RealTime or false
local ColorDisplay = Linux.Instance("TextButton", {
Parent = ColorPicker,
BackgroundColor3 = CurrentColor,
Size = UDim2.new(0, 24, 0, 24),
Position = UDim2.new(1, -34, 0.5, -12),
Text = "",
ZIndex = 2,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(60, 60, 70),
AutoButtonColor = false
})
Linux.Instance("UICorner", {
Parent = ColorDisplay,
CornerRadius = UDim.new(0, 6)
})
Linux.Instance("UIStroke", {
Parent = ColorDisplay,
Color = Color3.fromRGB(40, 40, 50),
Thickness = 1
})
local function RGBToHex(color)
local r = math.floor(color.R * 255)
local g = math.floor(color.G * 255)
local b = math.floor(color.B * 255)
return string.format("%02X%02X%02X", r, g, b)
end
local function HexToRGB(hex)
hex = string.gsub(hex, "#", "")
hex = string.upper(hex)
if #hex == 3 then
hex = string.gsub(hex, "(.)", "%1%1")
elseif #hex ~= 6 then
return nil
end
local r = tonumber(string.sub(hex, 1, 2), 16)
local g = tonumber(string.sub(hex, 3, 4), 16)
local b = tonumber(string.sub(hex, 5, 6), 16)
if r and g and b then
return Color3.fromRGB(r, g, b)
else
return nil
end
end
local function ValidateHexInput(text)
text = string.gsub(text, "#", "")
text = string.gsub(text, "[^0-9A-Fa-f]", "")
text = string.upper(text)
return string.sub(text, 1, 6)
end
local function createColorPickerDialog()
local isMobile = Linux.DeviceType == "Mobile"
local dialogWidth = isMobile and 280 or 320
local dialogHeight = isMobile and 300 or 350
local ColorOverlay = Linux.Instance("Frame", {
Parent = Main,
BackgroundColor3 = Color3.fromRGB(0, 0, 0),
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
ZIndex = 1000,
Active = true
})
Linux.Instance("UICorner", {
Parent = ColorOverlay,
CornerRadius = UDim.new(0, 8)
})
local overlayTween = TweenService:Create(ColorOverlay, TweenInfo.new(0.2), { BackgroundTransparency = 0.5 })
globalConnectionManager:addTween(overlayTween)
overlayTween:Play()
for _, element in pairs(Main:GetDescendants()) do
if element:IsA("TextButton") or element:IsA("TextBox") or element:IsA("ImageButton") then
if element ~= ColorOverlay and not element:IsDescendantOf(ColorOverlay) then
element.Active = false
end
end
end
local DialogFrame = Linux.Instance("Frame", {
Parent = ColorOverlay,
BackgroundColor3 = Color3.fromRGB(10, 10, 10),
BorderColor3 = Color3.fromRGB(39, 39, 42),
BorderSizePixel = 1,
BackgroundTransparency = 0.5,
Size = UDim2.new(0, dialogWidth, 0, dialogHeight),
Position = UDim2.new(0.5, -dialogWidth / 2, 0.5, -dialogHeight / 2),
ZIndex = 1001
})
Linux.Instance("UICorner", {
Parent = DialogFrame,
CornerRadius = UDim.new(0, 12)
})
Linux.Instance("UIScale", {
Parent = DialogFrame,
Scale = 0.9
})
local dialogTweenTransparency = TweenService:Create(DialogFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
BackgroundTransparency = 0
})
local dialogTweenScale = TweenService:Create(DialogFrame.UIScale, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
Scale = 1
})
globalConnectionManager:addTween(dialogTweenTransparency)
globalConnectionManager:addTween(dialogTweenScale)
dialogTweenTransparency:Play()
dialogTweenScale:Play()
local TitleLabel = Linux.Instance("TextLabel", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -50, 0, 25),
Position = UDim2.new(0, 8, 0, 8),
Font = Enum.Font.GothamBold,
Text = "Color Picker",
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 14,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 1002
})
TitleLabel.Text = "Color Picker"
local ClosePickerButton = Linux.Instance("ImageButton", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 14, 0, 14),
Position = UDim2.new(1, -22, 0, 8),
Image = "rbxassetid://10747384394",
ImageColor3 = Color3.fromRGB(180, 180, 190),
ZIndex = 1003
})
globalConnectionManager:addConnection(ClosePickerButton.MouseEnter:Connect(function()
local tween = TweenService:Create(ClosePickerButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(255, 255, 255) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
globalConnectionManager:addConnection(ClosePickerButton.MouseLeave:Connect(function()
local tween = TweenService:Create(ClosePickerButton, TweenInfo.new(0.2), { ImageColor3 = Color3.fromRGB(180, 180, 190) })
globalConnectionManager:addTween(tween)
tween:Play()
end))
local ColorArea = Linux.Instance("Frame", {
Parent = DialogFrame,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
Size = UDim2.new(1, -16, 0, isMobile and 120 or 140),
Position = UDim2.new(0, 8, 0, 35),
ZIndex = 1002,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(60, 60, 70)
})
Linux.Instance("UICorner", {
Parent = ColorArea,
CornerRadius = UDim.new(0, 4)
})
local ColorAreaButton = Linux.Instance("TextButton", {
Parent = ColorArea,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Text = "",
ZIndex = 1003
})
local ColorCursor = Linux.Instance("Frame", {
Parent = ColorArea,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
Size = UDim2.new(0, 6, 0, 6),
Position = UDim2.new(1, -3, 0, -3),
ZIndex = 1004,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(0, 0, 0)
})
Linux.Instance("UICorner", {
Parent = ColorCursor,
CornerRadius = UDim.new(1, 0)
})
local HexFrame = Linux.Instance("Frame", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -16, 0, 25),
Position = UDim2.new(0, 8, 0, isMobile and 165 or 185),
ZIndex = 1002
})
local HexLabel = Linux.Instance("TextLabel", {
Parent = HexFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 25, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = "HEX",
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 10,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 1002
})
local HexInputFrame = Linux.Instance("Frame", {
Parent = HexFrame,
BackgroundColor3 = Color3.fromRGB(28, 28, 28),
BackgroundTransparency = 0.7,
Size = UDim2.new(1, -30, 0, 20),
Position = UDim2.new(0, 28, 0.5, -10),
ZIndex = 1002,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(60, 60, 70)
})
Linux.Instance("UICorner", {
Parent = HexInputFrame,
CornerRadius = UDim.new(0, 3)
})
local HexInput = Linux.Instance("TextBox", {
Parent = HexInputFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -14, 1, 0),
Position = UDim2.new(0, 7, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = RGBToHex(CurrentColor),
PlaceholderText = "FFFFFF",
PlaceholderColor3 = Color3.fromRGB(120, 120, 130),
TextColor3 = Color3.fromRGB(255, 255, 255),
TextSize = 10,
TextXAlignment = Enum.TextXAlignment.Center,
ZIndex = 1003
})
local HashSymbol = Linux.Instance("TextLabel", {
Parent = HexInputFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 6, 1, 0),
Position = UDim2.new(0, 2, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = "#",
TextColor3 = Color3.fromRGB(150, 150, 160),
TextSize = 10,
TextXAlignment = Enum.TextXAlignment.Center,
ZIndex = 1003
})
local function HSVToRGB(h, s, v)
local r, g, b
local i = math.floor(h * 6)
local f = h * 6 - i
local p = v * (1 - s)
local q = v * (1 - f * s)
local t = v * (1 - (1 - f) * s)
local imod = i % 6
if imod == 0 then
r, g, b = v, t, p
elseif imod == 1 then
r, g, b = q, v, p
elseif imod == 2 then
r, g, b = p, v, t
elseif imod == 3 then
r, g, b = p, q, v
elseif imod == 4 then
r, g, b = t, p, v
elseif imod == 5 then
r, g, b = v, p, q
end
return r, g, b
end
local function RGBToHSV(r, g, b)
local max = math.max(r, g, b)
local min = math.min(r, g, b)
local delta = max - min
local h, s, v = 0, 0, max
if delta > 0 then
s = delta / max
if max == r then
h = ((g - b) / delta) % 6
elseif max == g then
h = (b - r) / delta + 2
else
h = (r - g) / delta + 4
end
h = h / 6
end
return h, s, v
end
local currentH, currentS, currentV = RGBToHSV(CurrentColor.R, CurrentColor.G, CurrentColor.B)
local function updateColorArea()
local hueColor = Color3.fromHSV(currentH, 1, 1)
ColorArea.BackgroundColor3 = hueColor
local whiteOverlay = ColorArea:FindFirstChild("WhiteOverlay")
if not whiteOverlay then
whiteOverlay = Linux.Instance("Frame", {
Parent = ColorArea,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
Size = UDim2.new(1, 0, 1, 0),
ZIndex = 1002,
BorderSizePixel = 0,
Name = "WhiteOverlay"
})
Linux.Instance("UICorner", {
Parent = whiteOverlay,
CornerRadius = UDim.new(0, 4)
})
local whiteGradient = Linux.Instance("UIGradient", {
Parent = whiteOverlay,
Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
}),
Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 0),
NumberSequenceKeypoint.new(1, 1)
}),
Rotation = 0
})
local blackOverlay = Linux.Instance("Frame", {
Parent = ColorArea,
BackgroundColor3 = Color3.fromRGB(0, 0, 0),
Size = UDim2.new(1, 0, 1, 0),
ZIndex = 1002,
BorderSizePixel = 0,
Name = "BlackOverlay"
})
Linux.Instance("UICorner", {
Parent = blackOverlay,
CornerRadius = UDim.new(0, 4)
})
local blackGradient = Linux.Instance("UIGradient", {
Parent = blackOverlay,
Color = ColorSequence.new({
ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
}),
Transparency = NumberSequence.new({
NumberSequenceKeypoint.new(0, 1),
NumberSequenceKeypoint.new(1, 0)
}),
Rotation = 90
})
end
end
local function updateCursorPosition()
local x = currentS
local y = 1 - currentV
ColorCursor.Position = UDim2.new(x, -3, y, -3)
end
local RedSlider, GreenSlider, BlueSlider
local RedValue, GreenValue, BlueValue
local function updateRGBSliders()
local r = math.floor(CurrentColor.R * 255)
local g = math.floor(CurrentColor.G * 255)
local b = math.floor(CurrentColor.B * 255)
if RedValue then RedValue.Text = tostring(r) end
if GreenValue then GreenValue.Text = tostring(g) end
if BlueValue then BlueValue.Text = tostring(b) end
if RedSlider then
local redFill = RedSlider:FindFirstChild("Fill")
local redKnob = RedSlider:FindFirstChild("Knob")
if redFill and redKnob then
local pos = r / 255
redFill.Size = UDim2.new(pos, 0, 1, 0)
redKnob.Position = UDim2.new(pos, -3, 0.5, -3)
end
end
if GreenSlider then
local greenFill = GreenSlider:FindFirstChild("Fill")
local greenKnob = GreenSlider:FindFirstChild("Knob")
if greenFill and greenKnob then
local pos = g / 255
greenFill.Size = UDim2.new(pos, 0, 1, 0)
greenKnob.Position = UDim2.new(pos, -3, 0.5, -3)
end
end
if BlueSlider then
local blueFill = BlueSlider:FindFirstChild("Fill")
local blueKnob = BlueSlider:FindFirstChild("Knob")
if blueFill and blueKnob then
local pos = b / 255
blueFill.Size = UDim2.new(pos, 0, 1, 0)
blueKnob.Position = UDim2.new(pos, -3, 0.5, -3)
end
end
HexInput.Text = RGBToHex(CurrentColor)
end
local function updateCurrentColor()
local r, g, b = HSVToRGB(currentH, currentS, currentV)
CurrentColor = Color3.fromRGB(math.floor(r * 255), math.floor(g * 255), math.floor(b * 255))
ColorDisplay.BackgroundColor3 = CurrentColor
if RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
updateRGBSliders()
end
updateColorArea()
updateCursorPosition()
local accentColor = Linux.Accents[Linux.CurrentAccent]
local function createRGBSlider(colorName, position, value)
local SliderFrame = Linux.Instance("Frame", {
Parent = DialogFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, -16, 0, 16),
Position = position,
ZIndex = 1002
})
local Label = Linux.Instance("TextLabel", {
Parent = SliderFrame,
BackgroundTransparency = 1,
Size = UDim2.new(0, 12, 1, 0),
Position = UDim2.new(0, 0, 0, 0),
Font = Enum.Font.GothamSemibold,
Text = colorName,
TextColor3 = Color3.fromRGB(200, 200, 210),
TextSize = 10,
TextXAlignment = Enum.TextXAlignment.Left,
ZIndex = 1002
})
local ValueFrame = Linux.Instance("Frame", {
Parent = SliderFrame,
BackgroundColor3 = Color3.fromRGB(30, 30, 30),
BackgroundTransparency = 0.7,
Size = UDim2.new(0, 30, 0, 12),
Position = UDim2.new(1, -30, 0.5, -6),
ZIndex = 1002,
BorderSizePixel = 0,
BorderColor3 = Color3.fromRGB(60, 60, 70)
})
Linux.Instance("UICorner", {
Parent = ValueFrame,
CornerRadius = UDim.new(0, 4)
})
local ValueText = Linux.Instance("TextLabel", {
Parent = ValueFrame,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Font = Enum.Font.GothamSemibold,
Text = tostring(value),
TextColor3 = Color3.fromRGB(255, 255, 255),
TextSize = 8,
TextXAlignment = Enum.TextXAlignment.Center,
ZIndex = 1003
})
local SliderTrack = Linux.Instance("Frame", {
Parent = SliderFrame,
BackgroundColor3 = Color3.fromRGB(40, 40, 50),
Size = UDim2.new(1, -50, 0, 4),
Position = UDim2.new(0, 15, 0.5, -2),
ZIndex = 1002,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(60, 60, 70)
})
Linux.Instance("UICorner", {
Parent = SliderTrack,
CornerRadius = UDim.new(0, 2)
})
local SliderFill = Linux.Instance("Frame", {
Parent = SliderTrack,
BackgroundColor3 = accentColor,
Size = UDim2.new(value / 255, 0, 1, 0),
ZIndex = 1002,
BorderSizePixel = 0,
Name = "Fill"
})
Linux.Instance("UICorner", {
Parent = SliderFill,
CornerRadius = UDim.new(0, 2)
})
local SliderKnob = Linux.Instance("Frame", {
Parent = SliderTrack,
BackgroundColor3 = Color3.fromRGB(255, 255, 255),
Size = UDim2.new(0, 6, 0, 6),
Position = UDim2.new(value / 255, -3, 0.5, -3),
ZIndex = 1003,
BorderSizePixel = 1,
BorderColor3 = Color3.fromRGB(0, 0, 0),
Name = "Knob"
})
Linux.Instance("UICorner", {
Parent = SliderKnob,
CornerRadius = UDim.new(1, 0)
})
local SliderButton = Linux.Instance("TextButton", {
Parent = SliderTrack,
BackgroundTransparency = 1,
Size = UDim2.new(1, 0, 1, 0),
Text = "",
ZIndex = 1003
})
local isDragging = false
local function updateSlider(pos)
local relativePos = math.clamp((pos - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
local newValue = math.floor(relativePos * 255)
ValueText.Text = tostring(newValue)
SliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
SliderKnob.Position = UDim2.new(relativePos, -3, 0.5, -3)
return newValue
end
globalConnectionManager:addConnection(SliderButton.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
isDragging = true
local newValue = updateSlider(input.Position.X)
if colorName == "R" then
CurrentColor = Color3.fromRGB(newValue, CurrentColor.G * 255, CurrentColor.B * 255)
elseif colorName == "G" then
CurrentColor = Color3.fromRGB(CurrentColor.R * 255, newValue, CurrentColor.B * 255)
elseif colorName == "B" then
CurrentColor = Color3.fromRGB(CurrentColor.R * 255, CurrentColor.G * 255, newValue)
end
currentH, currentS, currentV = RGBToHSV(CurrentColor.R, CurrentColor.G, CurrentColor.B)
updateColorArea()
updateCursorPosition()
ColorDisplay.BackgroundColor3 = CurrentColor
HexInput.Text = RGBToHex(CurrentColor)
if RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
end
end))
globalConnectionManager:addConnection(SliderButton.InputChanged:Connect(function(input)
if isDragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
local newValue = updateSlider(input.Position.X)
if colorName == "R" then
CurrentColor = Color3.fromRGB(newValue, CurrentColor.G * 255, CurrentColor.B * 255)
elseif colorName == "G" then
CurrentColor = Color3.fromRGB(CurrentColor.R * 255, newValue, CurrentColor.B * 255)
elseif colorName == "B" then
CurrentColor = Color3.fromRGB(CurrentColor.R * 255, CurrentColor.G * 255, newValue)
end
currentH, currentS, currentV = RGBToHSV(CurrentColor.R, CurrentColor.G, CurrentColor.B)
updateColorArea()
updateCursorPosition()
ColorDisplay.BackgroundColor3 = CurrentColor
HexInput.Text = RGBToHex(CurrentColor)
if RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
end
end))
globalConnectionManager:addConnection(SliderButton.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
isDragging = false
end
end))
return SliderTrack, ValueText
end
RedSlider, RedValue = createRGBSlider("R", UDim2.new(0, 8, 0, isMobile and 200 or 220), math.floor(CurrentColor.R * 255))
GreenSlider, GreenValue = createRGBSlider("G", UDim2.new(0, 8, 0, isMobile and 220 or 240), math.floor(CurrentColor.G * 255))
BlueSlider, BlueValue = createRGBSlider("B", UDim2.new(0, 8, 0, isMobile and 240 or 260), math.floor(CurrentColor.B * 255))
globalConnectionManager:addConnection(HexInput:GetPropertyChangedSignal("Text"):Connect(function()
local validatedHex = ValidateHexInput(HexInput.Text)
if validatedHex ~= HexInput.Text then
HexInput.Text = validatedHex
end
end))
globalConnectionManager:addConnection(HexInput.FocusLost:Connect(function(enterPressed)
local hexColor = HexToRGB(HexInput.Text)
if hexColor then
CurrentColor = hexColor
currentH, currentS, currentV = RGBToHSV(CurrentColor.R, CurrentColor.G, CurrentColor.B)
updateColorArea()
updateCursorPosition()
updateRGBSliders()
ColorDisplay.BackgroundColor3 = CurrentColor
if RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
else
HexInput.Text = RGBToHex(CurrentColor)
end
end))
local isDraggingColor = false
globalConnectionManager:addConnection(ColorAreaButton.InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
isDraggingColor = true
local relativeX = math.clamp((input.Position.X - ColorArea.AbsolutePosition.X) / ColorArea.AbsoluteSize.X, 0, 1)
local relativeY = math.clamp((input.Position.Y - ColorArea.AbsolutePosition.Y) / ColorArea.AbsoluteSize.Y, 0, 1)
currentS = relativeX
currentV = 1 - relativeY
updateCurrentColor()
updateCursorPosition()
end
end))
globalConnectionManager:addConnection(ColorAreaButton.InputChanged:Connect(function(input)
if isDraggingColor and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
local relativeX = math.clamp((input.Position.X - ColorArea.AbsolutePosition.X) / ColorArea.AbsoluteSize.X, 0, 1)
local relativeY = math.clamp((input.Position.Y - ColorArea.AbsolutePosition.Y) / ColorArea.AbsoluteSize.Y, 0, 1)
currentS = relativeX
currentV = 1 - relativeY
updateCurrentColor()
updateCursorPosition()
end
end))
globalConnectionManager:addConnection(ColorAreaButton.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
isDraggingColor = false
end
end))
local function closeDialog()
local closeTweenOverlay = TweenService:Create(ColorOverlay, TweenInfo.new(0.2), { BackgroundTransparency = 1 })
local closeTweenDialogTransparency = TweenService:Create(DialogFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
BackgroundTransparency = 1
})
local closeTweenDialogScale = TweenService:Create(DialogFrame.UIScale, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { 
Scale = 0.9
})
globalConnectionManager:addTween(closeTweenOverlay)
globalConnectionManager:addTween(closeTweenDialogTransparency)
globalConnectionManager:addTween(closeTweenDialogScale)
closeTweenOverlay:Play()
closeTweenDialogTransparency:Play()
closeTweenDialogScale:Play()
closeTweenDialogTransparency.Completed:Wait()
for _, element in pairs(Main:GetDescendants()) do
if element:IsA("TextButton") or element:IsA("TextBox") or element:IsA("ImageButton") then
element.Active = true
end
end
ColorOverlay:Destroy()
if not RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
end
globalConnectionManager:addConnection(ClosePickerButton.MouseButton1Click:Connect(function()
closeDialog()
end))
globalConnectionManager:addConnection(ColorOverlay.MouseButton1Click:Connect(function()
closeDialog()
end))
globalConnectionManager:addConnection(DialogFrame.MouseButton1Click:Connect(function() end))
globalConnectionManager:addConnection(InputService.InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
if isDraggingColor then
isDraggingColor = false
end
end
end))
end
globalConnectionManager:addConnection(ColorDisplay.MouseButton1Click:Connect(function()
createColorPickerDialog()
end))
local function SetValue(newColor)
if typeof(newColor) == "Color3" then
CurrentColor = newColor
ColorDisplay.BackgroundColor3 = CurrentColor
if not RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
end
end
if not RealTimeUpdate then
spawn(function() Linux:SafeCallback(config.Callback, CurrentColor) end)
end
targetContainer.CanvasPosition = Vector2.new(0, 0)
local element = {
Type = "ColorPicker",
Name = config.Name,
Instance = ColorPicker,
Value = CurrentColor
}
table.insert(Tabs[tabIndex].Elements, element)
table.insert(AllElements, { Tab = tabIndex, Element = element })
table.insert(Linux.SavedElements, {
Element = element,
TabName = Tabs[tabIndex].Name,
GetValue = function() 
return CurrentColor or Color3.fromRGB(255, 255, 255)
end,
SetValue = SetValue
})
globalConnectionManager:elementLoaded()
CheckEmptyState()
return {
Instance = ColorPicker,
SetValue = SetValue,
GetValue = function() return CurrentColor end
}
end
return TabElements
end
if config.ConfigSave ~= false then
Linux.SettingsTab = LinuxLib.Tab({
Name = "UI",
Icon = SettingsIconEnabled and SettingsIcon or nil,
Enabled = SettingsIconEnabled
})
local SettingsTab = Linux.SettingsTab
SettingsTab.Section({ Name = "Settings" })
local configNameInput = SettingsTab.Input({
Name = "Config Name",
Placeholder = "Config",
Default = Linux.CurrentConfig,
Callback = function(text)
Linux.CurrentConfig = text
end
})
Linux.LoadConfigList()
local configListDropdown = SettingsTab.Dropdown({
Name = "Config List",
Options = Linux.SavedConfigs,
Default = Linux.SavedConfigs[1] or "",
Callback = function(selected)
configNameInput.SetValue(selected)
Linux.CurrentConfig = selected
end
})
SettingsTab.Button({
Name = "Create Config",
Callback = function()
if not Linux.CurrentConfig or Linux.CurrentConfig == "" then
print("[ERROR] Cannot create config: Please enter a config name first")
return
end
for _, configName in ipairs(Linux.SavedConfigs or {}) do
if configName == Linux.CurrentConfig then
print("[ERROR] Cannot create config: A config with name '" .. Linux.CurrentConfig .. "' already exists. Use 'Overwrite Config' instead")
return
end
end
local success, result = Linux.SaveConfig(Linux.CurrentConfig)
if success then
print("[SUCCESS] Config '" .. Linux.CurrentConfig .. "' created successfully!")
Linux.LoadConfigList()
configListDropdown.SetOptions(Linux.SavedConfigs)
else
print("[ERROR] Failed to create config:", result)
end
end
})
SettingsTab.Button({
Name = "Load Config",
Callback = function()
if not Linux.CurrentConfig or Linux.CurrentConfig == "" then
print("[ERROR] Cannot load config: No config selected")
return
end
local success, result = Linux.LoadConfig(Linux.CurrentConfig)
if success then
print("[SUCCESS] Config '" .. Linux.CurrentConfig .. "' loaded successfully!")
else
print("[ERROR] Failed to load config '" .. Linux.CurrentConfig .. "':", result)
end
end
})
SettingsTab.Button({
Name = "Overwrite Config",
Callback = function()
if not Linux.CurrentConfig or Linux.CurrentConfig == "" then
print("[ERROR] Cannot overwrite: No config selected. Please select a config from the list")
return
end
local configExists = false
for _, configName in ipairs(Linux.SavedConfigs or {}) do
if configName == Linux.CurrentConfig then
configExists = true
break
end
end
if not configExists then
print("[ERROR] Cannot overwrite: Config '" .. Linux.CurrentConfig .. "' does not exist. Use 'Create Config' instead")
return
end
local success, result = Linux.SaveConfig(Linux.CurrentConfig)
if success then
print("[SUCCESS] Config '" .. Linux.CurrentConfig .. "' overwritten successfully!")
Linux.LoadConfigList()
configListDropdown.SetOptions(Linux.SavedConfigs)
else
print("[ERROR] Failed to overwrite config:", result)
end
end
})
SettingsTab.Button({
Name = "Delete Config",
Callback = function()
if not Linux.CurrentConfig or Linux.CurrentConfig == "" then
print("[ERROR] Cannot delete: No config selected. Please select a config from the list")
return
end
local configExists = false
for _, configName in ipairs(Linux.SavedConfigs or {}) do
if configName == Linux.CurrentConfig then
configExists = true
break
end
end
if not configExists then
print("[ERROR] Cannot delete: Config '" .. Linux.CurrentConfig .. "' does not exist")
return
end
local success, result = Linux.DeleteConfig(Linux.CurrentConfig)
if success then
Linux.LoadConfigList()
configListDropdown.SetOptions(Linux.SavedConfigs)
if #Linux.SavedConfigs > 0 then
configNameInput.SetValue(Linux.SavedConfigs[1])
Linux.CurrentConfig = Linux.SavedConfigs[1]
print("[INFO] Switched to config '" .. Linux.SavedConfigs[1] .. "'")
else
configNameInput.SetValue("")
Linux.CurrentConfig = ""
print("[INFO] No configs remaining")
end
else
print("[ERROR] Failed to delete config:", result)
end
end
})
SettingsTab.Section({ Name = "Initialization" })
local autoLoadConfigInput = SettingsTab.Input({
Name = "Load Config",
Description = "",
Placeholder = "Config Name",
Default = Linux.AutoLoadConfig,
Callback = function(text)
Linux.AutoLoadConfig = text
Linux.SaveAutoLoadSettings()
end,
IsAutoLoadInput = true
})
table.insert(Linux.SavedElements, {
Element = {
Type = "Input",
Name = "Load Config"
},
TabName = "UI",
GetValue = function() return Linux.AutoLoadConfig end,
SetValue = function(value)
Linux.AutoLoadConfig = value
autoLoadConfigInput.SetValue(value)
end,
IsAutoLoadInput = true
})
local autoLoadToggle = SettingsTab.Toggle({
Name = "Auto Load",
Description = "",
Default = Linux.AutoLoadEnabled,
Callback = function(state)
Linux.AutoLoadEnabled = state
Linux.SaveAutoLoadSettings()
end
})
SettingsTab.Section({ Name = "Privacy" })
local privacyToggle = SettingsTab.Toggle({
Name = "Anonymous Mode",
Description = "Hide your display name within the interface.",
Default = Linux.PrivacyEnabled,
Callback = function(state)
Linux.PrivacyEnabled = state
Linux.SavePrivacySettings()
UpdatePrivacyDisplay()
end
})
	local detectedAdmins = {}
	Linux.AdminDetectorEnabled = Linux.AdminDetectorEnabled or false
	Linux.AdminDetectorAction = Linux.AdminDetectorAction or "Notify"
	local function checkPlayerById(player, isJoining)
		if player == Players.LocalPlayer then return end
		if detectedAdmins[player.UserId] then return end
		if not Linux.AdminDetectorEnabled then return end
		if not Linux.DetectorList then return end
		for _, userId in ipairs(Linux.DetectorList) do
			if player.UserId == userId then
				detectedAdmins[player.UserId] = true
				if Linux.AdminDetectorAction == "Notify" then
					local contentMessage = isJoining and (player.Name .. " joined the server (ID: " .. player.UserId .. ")") or (player.Name .. " is in the server (ID: " .. player.UserId .. ")")
					Linux:Notify({
						Title = "Admin Detected",
						Content = contentMessage,
						Duration = 20
					})
				elseif Linux.AdminDetectorAction == "Kick" then
					Linux:Notify({
						Title = "Admin Detected - Kicking",
						Content = "Kicking " .. player.Name .. " (ID: " .. player.UserId .. ")",
						Duration = 5
					})
					task.wait(0.5)
					LocalPlayer:Kick("Detected admin in server")
				end
				return true
			end
		end
		return false
	end
	local function monitorPlayer(player, isJoining)
		task.spawn(function()
			checkPlayerById(player, isJoining)
		end)
	end
	local adminAddedConnection = nil
	local adminRemovingConnection = nil
	local function initAdminDetector()
		if Linux.AdminDetectorEnabled then
			for _, player in pairs(Players:GetPlayers()) do
				monitorPlayer(player, false)
			end
			if not adminAddedConnection then
				adminAddedConnection = Players.PlayerAdded:Connect(function(player)
					if Linux.AdminDetectorEnabled then
						task.wait(1)
						monitorPlayer(player, true)
					end
				end)
			end
			if not adminRemovingConnection then
				adminRemovingConnection = Players.PlayerRemoving:Connect(function(player)
					if detectedAdmins[player.UserId] and Linux.AdminDetectorEnabled and Linux.AdminDetectorAction == "Notify" then
						Linux:Notify({
							Title = "Monitored Admin Left",
							Content = player.Name .. " left the server",
							Duration = 10
						})
						detectedAdmins[player.UserId] = nil
					end
				end)
			end
		end
	end
	initAdminDetector()
	initAdminDetector()
	if Linux.DetectorList and #Linux.DetectorList > 0 then
		SettingsTab.Section({ Name = "Admin Detector" })
		local adminToggle = SettingsTab.Toggle({
			Name = "Enable Detector",
			Description = "Detects admins on the server",
			Default = Linux.AdminDetectorEnabled,
			Callback = function(value)
				Linux.AdminDetectorEnabled = value
				Linux.SaveAdminDetectorSettings()
				if value then
					initAdminDetector()
					if not adminAddedConnection then
						adminAddedConnection = Players.PlayerAdded:Connect(function(player)
							if Linux.AdminDetectorEnabled then
								task.wait(1)
								monitorPlayer(player, true)
							end
						end)
					end
					if not adminRemovingConnection then
						adminRemovingConnection = Players.PlayerRemoving:Connect(function(player)
							if detectedAdmins[player.UserId] and Linux.AdminDetectorEnabled and Linux.AdminDetectorAction == "Notify" then
								Linux:Notify({
									Title = "Monitored admin Left",
									Content = player.Name .. " left the server",
									Duration = 10
								})
								detectedAdmins[player.UserId] = nil
							end
						end)
					end
				else
					if adminAddedConnection then
						adminAddedConnection:Disconnect()
						adminAddedConnection = nil
					end
					if adminRemovingConnection then
						adminRemovingConnection:Disconnect()
						adminRemovingConnection = nil
					end
					detectedAdmins = {}
				end
			end
		})
		local adminDropdown = SettingsTab.Dropdown({
			Name = "Method Prevention",
			Description = "Select prevention method when admin is detected",
			Options = { "Notify", "Kick" },
			Default = Linux.AdminDetectorAction,
			Callback = function(selected)
				Linux.AdminDetectorAction = selected
				Linux.SaveAdminDetectorSettings()
			end
		})
	end
SettingsTab.Section({ Name = "Accent Color" })
local accentDropdown = SettingsTab.Dropdown({
Name = "Select Color",
Description = "",
Options = { "Orange", "Purple", "Blue", "Red", "Green", "Black & White" },
Default = Linux.CurrentAccent,
Callback = function(selected)
Linux.SelectedAccent = selected
end
})
SettingsTab.Button({
Name = "Apply Color",
Description = "Apply the selected color and save.",
Callback = function()
Linux.ApplyAccent(Linux.SelectedAccent)
Linux.SaveAccentSettings()
end
})
Linux.RefreshLanguageSettings()
	Linux.SetIgnoreIndexes({
		"Config Name",
		"Config List",
		"Anonymous Mode",
		"Select Accent",
		"Select Language",
		"Select Color",
		"Admin Detector",
		"Method Prevention"
	})
end
if Linux.AutoLoadEnabled and Linux.AutoLoadConfig ~= "" then
task.spawn(function()
local maxAttempts = 200
local attempts = 0
local checkInterval = 0.2
while attempts < maxAttempts do
if globalConnectionManager:allElementsLoaded() and #Linux.SavedElements > 0 then
task.wait(5)
local success, result = Linux.LoadConfig(Linux.AutoLoadConfig)
if not success then
print("Failed to auto-load config:", result)
end
break
end
task.wait(checkInterval)
attempts = attempts + 1
end
if attempts >= maxAttempts then
print("Auto-load timeout: Not all elements loaded within", maxAttempts * checkInterval, "seconds")
end
end)
end
	function LinuxLib.Destroy()
		Linux.Destroy()
		LinuxUI:Destroy()
		if Linux.ToggleUI then
			Linux.ToggleUI:Destroy()
		end
	end
	return LinuxLib
end

Linux.TagsBlocked = false

function Linux.BlockTags(enabled)
	Linux.TagsBlocked = enabled
	if enabled and Linux.TopBarTagsContainer then
		for _, child in ipairs(Linux.TopBarTagsContainer:GetChildren()) do
			if child:IsA("Frame") then
				child.Visible = false
			end
		end
	elseif not enabled and Linux.TopBarTagsContainer then
		for _, child in ipairs(Linux.TopBarTagsContainer:GetChildren()) do
			if child:IsA("Frame") then
				child.Visible = true
			end
		end
	end
end

function Linux.Tag(config)
	if Linux.TagsBlocked then
		return {
			Frame = nil,
			Label = nil,
			SetTitle = function() end,
			SetColor = function() end,
			StartEffect = function() end,
			StopEffect = function() end,
			IsEffectRunning = function() return false end,
			GetCurrentEffect = function() return nil end,
			Destroy = function() end
		}
	end
	if not Linux.TopBarTagsContainer then
		warn("Cannot create tag: TopBar not initialized yet")
		return nil
	end
	local titleText = config.Title or "Tag"
	local tagColor = config.Color or Color3.fromRGB(100, 100, 255)
	local cornerRadius = config.CornerRadius or UDim.new(0, 4)
	local hasGradient = config.Gradient and config.Gradient.Enabled
	local tagFrame = Linux.Instance("Frame", {
		Parent = Linux.TopBarTagsContainer,
		BackgroundColor3 = typeof(tagColor) == "Color3" and tagColor or Color3.fromRGB(100, 100, 255),
		BackgroundTransparency = 0,
		BorderSizePixel = 0,
		AutomaticSize = Enum.AutomaticSize.X,
		Size = UDim2.new(0, 0, 0, 18),
		ZIndex = 3
	})
	Linux.Instance("UICorner", {
		Parent = tagFrame,
		CornerRadius = cornerRadius
	})
	if hasGradient then
		local gradient = Linux.Instance("UIGradient", {
			Parent = tagFrame,
			Color = config.Gradient.Color or ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
			},
			Rotation = config.Gradient.Rotation or 0
		})
	end
	local tagPadding = Linux.Instance("UIPadding", {
		Parent = tagFrame,
		PaddingLeft = UDim.new(0, 6),
		PaddingRight = UDim.new(0, 6),
		PaddingTop = UDim.new(0, 2),
		PaddingBottom = UDim.new(0, 2)
	})
	local tagLabel = Linux.Instance("TextLabel", {
		Parent = tagFrame,
		BackgroundTransparency = 1,
		Size = UDim2.new(0, 0, 1, 0),
		AutomaticSize = Enum.AutomaticSize.X,
		Font = Enum.Font.GothamBold,
		Text = titleText,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextSize = 10,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextYAlignment = Enum.TextYAlignment.Center,
		ZIndex = 4
	})
	local effectConnection = nil
	local effectRunning = false
	local currentEffectType = nil
	local function StartEffect(effectType)
		if effectConnection then
			effectConnection:Disconnect()
			effectConnection = nil
		end
		effectRunning = true
		currentEffectType = effectType
		if effectType == "Pulse" then
			local startTime = tick()
			effectConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not tagFrame or not tagFrame.Parent then
					if effectConnection then
						effectConnection:Disconnect()
						effectConnection = nil
					end
					return
				end
				local elapsed = tick() - startTime
				local alpha = (math.sin(elapsed * 3) + 1) / 2
				local baseColor = config.Color or Color3.fromRGB(100, 100, 255)
				local brightColor = Color3.new(
					math.min(1, baseColor.R + 0.3),
					math.min(1, baseColor.G + 0.3),
					math.min(1, baseColor.B + 0.3)
				)
				tagFrame.BackgroundColor3 = baseColor:Lerp(brightColor, alpha)
			end)
		elseif effectType == "Breathing" then
			local startTime = tick()
			effectConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not tagFrame or not tagFrame.Parent then
					if effectConnection then
						effectConnection:Disconnect()
						effectConnection = nil
					end
					return
				end
				local elapsed = tick() - startTime
				local alpha = (math.sin(elapsed * 1.5) + 1) / 2
				tagFrame.BackgroundTransparency = 0.3 * alpha
			end)
		elseif effectType == "Glow" then
			local startTime = tick()
			effectConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not tagFrame or not tagFrame.Parent then
					if effectConnection then
						effectConnection:Disconnect()
						effectConnection = nil
					end
					return
				end
				local elapsed = tick() - startTime
				local alpha = (math.sin(elapsed * 2.5) + 1) / 2
				local baseColor = config.Color or Color3.fromRGB(100, 100, 255)
				local glowColor = Color3.new(1, 1, 1)
				tagFrame.BackgroundColor3 = baseColor:Lerp(glowColor, alpha * 0.4)
			end)
		elseif effectType == "Shift" then
			local startTime = tick()
			local baseColor = config.Color or Color3.fromRGB(100, 100, 255)
			effectConnection = game:GetService("RunService").Heartbeat:Connect(function()
				if not tagFrame or not tagFrame.Parent then
					if effectConnection then
						effectConnection:Disconnect()
						effectConnection = nil
					end
					return
				end
				local elapsed = tick() - startTime
				local hue = (elapsed * 0.1) % 1
				local h, s, v = baseColor:ToHSV()
				local shiftedHue = (h + hue * 0.3) % 1
				tagFrame.BackgroundColor3 = Color3.fromHSV(shiftedHue, s, v)
			end)
		end
	end
	local function StopEffect()
		if effectConnection then
			effectConnection:Disconnect()
			effectConnection = nil
		end
		effectRunning = false
		currentEffectType = nil
		tagFrame.BackgroundColor3 = config.Color or Color3.fromRGB(100, 100, 255)
		tagFrame.BackgroundTransparency = 0
	end
	if config.Effect and config.Effect.Enabled and config.Effect.Type then
		StartEffect(config.Effect.Type)
	end
	return {
		Frame = tagFrame,
		Label = tagLabel,
		SetTitle = function(newTitle)
			tagLabel.Text = newTitle
		end,
		SetColor = function(newColor)
			tagFrame.BackgroundColor3 = newColor
			config.Color = newColor
			if effectRunning and currentEffectType then
				StopEffect()
				StartEffect(currentEffectType)
			end
		end,
		StartEffect = function(effectType)
			StartEffect(effectType)
		end,
		StopEffect = function()
			StopEffect()
		end,
		IsEffectRunning = function()
			return effectRunning
		end,
		GetCurrentEffect = function()
			return currentEffectType
		end,
		Destroy = function()
			StopEffect()
			tagFrame:Destroy()
		end
	}
end

return Linux